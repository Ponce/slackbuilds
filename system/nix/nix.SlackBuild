#!/bin/bash

# Slackware build script for nix

# Copyright 2019-2024 Pouria Rezaei <Pouria.rz@outlook.com>
# Copyright 2015 Pragmatic Cypher <slackbuilds@server.ky>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# 20220325 bkw: Modified by SlackBuilds.org: fix multiple issues:
# - on 64-bit, /usr/bin/nix and some /usr/lib64/libnix*.so files
#   were being written to the real root partition (this happened
#   during "make", not "make install"). added a patch from Debian
#   that prevents this.
# - on 32-bit, the same thing happened, plus the build failed. the
#   same patch fixes that.
# - get rid of empty gzipped file usr/man/man1/nix3-manpages.gz.
#
# Note: this defeats ccache by default (it uses
# e.g. x86_64-slackware-linux-gcc instead of just gcc). If you want
# cacheable builds, export CC=gcc and CXX=g++ in the environment.
#
# Note: during the build, we get "warning: you don't have Internet
# access; disabling some network-dependent features" when building
# with network access disabled (e.g. in a container). I have no
# idea if this is a problem, but it's something the maintainer might
# want to look into. SlackBuilds aren't supposed to require network
# access to run.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=nix
VERSION=${VERSION:-2.23.3}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION.tar.gz
cd $PRGNAM-$VERSION
# Broken symlinks, adios.
find . -xtype l -exec rm -f {} \;

# - Added global CFLAGS.
# - Pointed shell as not sandbox, fixed zsh only build.
# - Stopped nix from spamming root parition during "make" process.
# - Disabled mdbook.
# - Fixed annoying warning for constructor (cpp20 syntax circus).
# - Added some clean parameters on build.
patch -p1 < $CWD/fix_nix_options.patch
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \+ -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \+

autoreconf -vfim
autoheader
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --mandir=/usr/man \
  --docdir=/usr/doc/$PRGNAM-$VERSION \
  --sysconfdir=/etc \
  --disable-unit-tests \
  --disable-functional-tests \
  --build=$ARCH-slackware-linux \
  --host=$ARCH-slackware-linux

make
make install DESTDIR=$PKG

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

install -D --mode 0755 $CWD/config/rc.nix $PKG/etc/rc.d/rc.nix.new
mkdir -p $PKG/nix
mkdir -p $PKG/var/nix/profiles
mkdir -p $PKG/nix/var/nix/profiles
mkdir -p $PKG/nix/var/nix/daemon-socket

rm -fR $PKG/etc/init.d
rm -fR $PKG/usr/lib${LIBDIRSUFFIX}/systemd

# Disable annoying error of nix search
mkdir -p $PKG/etc/nix
cat <<-EOF > $PKG/etc/nix/nix.conf.new
experimental-features = nix-command flakes
EOF

find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done

# 20220325 bkw: this isn't even named correctly for a man page...
rm -f $PKG/usr/man/man1/nix3-manpages.gz

if [ "$ARCH" = "x86_64" ]; then
  rm -rf $PKG/usr/lib
fi

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a COPYING README.md $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
