#!/bin/bash

# Slackware build script for pcem

# Copyright 2022-2024 K. Eugene Carlson  Tsukuba, Japan
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=pcem
VERSION=${VERSION:-b8ad941.20230304}
SRCVERSION=${SRCVERSION:-b8ad9416bc1d3acd8b384a83b753ddf2282bd091}
BUILD=${BUILD:-2}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

# Use ALSA=yes to output MIDI with ALSA.
unset USE_ALSA
[ ${ALSA:-no} = yes ] && USE_ALSA="-DUSE_ALSA=ON"

# Use NETWORKING=no to disable networking.
USE_NETWORKING="-DUSE_NETWORKING=ON"
[ ${NETWORKING:-yes} = no ] && USE_NETWORKING="-DUSE_NETWORKING=OFF"

# Use PCAP=no to disable PCAP networking. Has no effect unless networking is
# turned on.
unset NO_PCAP
[ ${PCAP:-yes} = no ] && NO_PCAP="-DUSE_PCAP_NETWORKING=OFF"

# Use PLUGINS=yes to build the plugin engine.
unset USE_PLUGINS
[ ${PLUGINS:-no} = yes ] && USE_PLUGINS="-DPLUGIN_ENGINE=ON"

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O3 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O3 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  # -fPIC causes the dynamic recompiler to crash
  SLKCFLAGS="-O3"
  LIBDIRSUFFIX=64
else
  SLKCFLAGS="-O3"
  LIBDIRSUFFIX=""
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$SRCVERSION
unzip $CWD/$PRGNAM-$SRCVERSION.zip
cd $PRGNAM-$SRCVERSION

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

# Fix 32-bit build
zcat $CWD/x86-build.diff.gz | patch -p0

mkdir build
cd build
cmake -G "Ninja" \
  -DwxWidgets_CONFIG_OPTIONS="--version=3.0" \
  -DCMAKE_C_FLAGS_RELEASE="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS_RELEASE="$SLKCFLAGS" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DPCEM_LIB_DIR=/usr/lib$LIBDIRSUFFIX \
  $USE_ALSA \
  $USE_NETWORKING \
  $NO_PCAP \
  $USE_PLUGINS \
  ..
ninja
DESTDIR=$PKG ninja install/strip
cd ..

# Use a wrapper script to create a symlink to the system roms collection
# (available with pcem-roms on SBo).
mv $PKG/usr/bin/pcem $PKG/usr/bin/PCem
cat << EOF >> $PKG/usr/bin/pcem
#!/bin/bash

[ ! -d \$HOME/.pcem ] && mkdir \$HOME/.pcem
[ ! -d \$HOME/.pcem/roms ] && ln -s /usr/share/pcem/roms \$HOME/.pcem/roms
PCem
EOF
chmod 0755 $PKG/usr/bin/pcem

mkdir -p $PKG/usr/man/man1
mv $PKG/usr/share/man/man1/pcem.man/pcem.man.1 $PKG/usr/man/man1/pcem.1
rm -r $PKG/usr/share/man
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done

# The text files saying "roms go here" aren't really necessary.
find $PKG/usr/share/pcem/roms -name roms.txt -delete
rm -f $PKG/usr/share/pcem/configs/configs.txt
# File included in error.
rm -f $PKG/usr/share/pcem/roms/mda.rom

# Make the plugins directory, if appropriate
[ ${PLUGINS:-no} = yes ] && mkdir $PKG/usr/share/pcem/plugins

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a \
  TESTED.md \
  README.md \
  $PKG/usr/doc/$PRGNAM-$VERSION
cat COPYING > $PKG/usr/doc/$PRGNAM-$VERSION/LICENSE
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild
cat $CWD/README > $PKG/usr/doc/$PRGNAM-$VERSION/README.sw

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
