diff --git a/Demo/Makefile.am b/Demo/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Demo/Makefile.am
@@ -0,0 +1,53 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+LDADD = $(top_builddir)/Source/libamd.la
+
+EXTRA_DIST = \
+	amd_demo.out \
+	amd_demo2.out \
+	amd_l_demo.out \
+	amd_simple.out \
+	amd_f77cross.out \
+	amd_f77demo.out \
+	amd_f77simple.out
+
+# Disable the .out implicit pattern rule.  Prevents GNU make from
+# adding bogus dependencies for the .out files listed above.
+%.out: %
+
+check_PROGRAMS = \
+	amd_demo \
+	amd_demo2 \
+	amd_l_demo \
+	amd_simple \
+	amd_f77cross \
+	amd_f77demo \
+	amd_f77simple
+
+amd_demo_SOURCES = amd_demo.c
+amd_demo2_SOURCES = amd_demo2.c
+amd_l_demo_SOURCES = amd_l_demo.c
+amd_simple_SOURCES = amd_simple.c
+
+check_LTLIBRARIES = libamd_f77wrapper.la
+libamd_f77wrapper_la_SOURCES = amd_f77wrapper.c
+libamd_f77wrapper_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT
+
+amd_f77cross_SOURCES = amd_f77cross.f
+amd_f77cross_LDADD = $(LDADD) $(top_builddir)/Source/libamdf77.la libamd_f77wrapper.la
+amd_f77demo_SOURCES = amd_f77demo.f
+amd_f77demo_LDADD = $(LDADD) $(top_builddir)/Source/libamdf77.la
+amd_f77simple_SOURCES = amd_f77simple.f
+amd_f77simple_LDADD = $(LDADD) $(top_builddir)/Source/libamdf77.la
+
+check-local: $(check_PROGRAMS) $(check_PROGRAMS:=.out)
+	@for i in $(check_PROGRAMS); do \
+		echo "Testing $$i"; \
+		./$$i$(EXEEXT) > my_$$i.out; \
+		if diff -u $(srcdir)/$$i.out my_$$i.out; then \
+			echo "Test $$i PASSED."; \
+		else \
+			echo "Test $$i FAILED."; \
+		fi; \
+	done
+
+CLEANFILES = my_*.out
diff --git a/Doc/Makefile.am b/Doc/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Doc/Makefile.am
@@ -0,0 +1,27 @@
+EXTRA_DIST = ChangeLog License lesser.txt
+
+dist_noinst_DATA = AMD_UserGuide.tex AMD_UserGuide.bib
+dist_pdf_DATA = AMD_UserGuide.pdf
+
+AMD_UserGuide.pdf AMD_UserGuide.aux: amd_h.tex
+.INTERMEDIATE: AMD_UserGuide.aux amd_h.tex
+
+%_h.tex: $(top_srcdir)/Include/%.h
+	echo '\begin{verbatim}' > $@
+	expand -8 $< >> $@
+	echo '\end{verbatim}' >> $@
+
+TEX = TEXINPUTS="$(srcdir):" pdflatex -interaction nonstopmode -file-line-error
+BIB = BIBINPUTS="$(srcdir):" bibtex
+%.pdf: %.tex %.bbl
+	$(TEX) $*
+	while grep -q "Rerun to get cross-references right" $*.log; do \
+		$(TEX) $*; \
+	done
+%.bbl: %.aux %.bib
+	$(BIB) $*
+%.aux: %.tex
+	$(TEX) $*
+
+CLEANFILES = *.aux *.bbl *.blg *.log *.toc *_h.tex
+MAINTAINERCLEANFILES = $(dist_pdf_DATA)
diff --git a/Include/Makefile.am b/Include/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Include/Makefile.am
@@ -0,0 +1 @@
+pkginclude_HEADERS = amd.h amd_internal.h
diff --git a/Makefile.am b/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Makefile.am
@@ -0,0 +1,5 @@
+SUBDIRS = Include Source Demo Doc
+EXTRA_DIST = README.txt
+
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = amd.pc
diff --git a/Source/Makefile.am b/Source/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Source/Makefile.am
@@ -0,0 +1,33 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+AMDSRC = \
+	amd_1.c \
+	amd_2.c \
+	amd_aat.c \
+	amd_control.c \
+	amd_defaults.c \
+	amd_dump.c \
+	amd_info.c \
+	amd_order.c \
+	amd_postorder.c \
+	amd_post_tree.c \
+	amd_preprocess.c \
+	amd_valid.c
+
+lib_LTLIBRARIES = libamd.la libamdf77.la
+noinst_LTLIBRARIES = libamdi.la libamdl.la
+
+libamdi_la_SOURCES = $(AMDSRC)
+libamdi_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm
+libamdi_la_CPPFLAGS = $(AM_CPPFLAGS) -DDINT
+
+libamdl_la_SOURCES = $(AMDSRC)
+libamdl_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm
+libamdl_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+libamd_la_SOURCES =
+libamd_la_LIBADD = libamdl.la libamdi.la
+libamd_la_LDFLAGS = -no-undefined -release $(PACKAGE_VERSION)
+
+libamdf77_la_SOURCES = amd.f amdbar.f
+libamdf77_la_LDFLAGS = -no-undefined -release $(PACKAGE_VERSION)
diff --git a/amd.pc.in b/amd.pc.in
new file mode 100644
--- /dev/null
+++ b/amd.pc.in
@@ -0,0 +1,13 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: @PACKAGE_NAME@
+Description: Approximate minimum degree ordering
+Version: @PACKAGE_VERSION@
+URL: @PACKAGE_URL@
+Requires.private: suitesparseconfig
+Libs: -L${libdir} -lamd
+Libs.private: -lm
+Cflags: -I${includedir}/amd
diff --git a/configure.ac b/configure.ac
new file mode 100644
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,44 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.69])
+AC_INIT([AMD],[2.4.1],[DrTimothyAldenDavis@gmail.com],[amd],[http://www.suitesparse.com/])
+AC_CONFIG_SRCDIR([Source/amd_order.c])
+AC_CONFIG_HEADERS([config.h])
+AM_INIT_AUTOMAKE([foreign])
+LT_INIT
+
+# Checks for programs.
+AC_PROG_INSTALL
+AC_PROG_CC
+AC_PROG_F77
+
+LIBS_SAVED=$LIBS
+
+# Checks for libraries.
+AC_CHECK_LIB([m], [sqrt])
+
+PKG_PROG_PKG_CONFIG
+PKG_CHECK_MODULES([SUITESPARSECONFIG],[suitesparseconfig],
+	[],
+	[AC_MSG_ERROR([cannot find suitesparseconfig])])
+
+# Checks for header files.
+AC_CHECK_HEADERS([limits.h stddef.h stdlib.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_TYPE_SIZE_T
+
+# Checks for library functions.
+AC_CHECK_FUNCS([sqrt])
+
+LIBS=$LIBS_SAVED
+
+AC_CONFIG_FILES([
+	amd.pc
+	Makefile
+	Demo/Makefile
+	Doc/Makefile
+	Include/Makefile
+	Source/Makefile])
+AC_OUTPUT
