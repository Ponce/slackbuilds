diff --git a/Check/Makefile.am b/Check/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Check/Makefile.am
@@ -0,0 +1,26 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	License.txt \
+	lesser.txt
+
+CHECKSRC = \
+	cholmod_check.c \
+	cholmod_read.c \
+	cholmod_write.c
+
+noinst_LTLIBRARIES = \
+	libchecki.la \
+	libcheckl.la \
+	libcheck.la
+
+libchecki_la_SOURCES = $(CHECKSRC)
+libchecki_la_LIBADD = $(SUITESPARSECONFIG_LIBS)
+libchecki_la_CPPFLAGS= $(AM_CPPFLAGS)
+
+libcheckl_la_SOURCES = $(CHECKSRC)
+libcheckl_la_LIBADD = $(SUITESPARSECONFIG_LIBS)
+libcheckl_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+libcheck_la_SOURCES =
+libcheck_la_LIBADD = libchecki.la libcheckl.la
diff --git a/Cholesky/Makefile.am b/Cholesky/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Cholesky/Makefile.am
@@ -0,0 +1,41 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(COLAMD_CFLAGS) $(AMD_CFLAGS) $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	License.txt \
+	lesser.txt
+
+CHOLESKYSRC = \
+	cholmod_amd.c \
+	cholmod_analyze.c \
+	cholmod_colamd.c \
+	cholmod_etree.c \
+	cholmod_factorize.c \
+	cholmod_postorder.c \
+	cholmod_rcond.c \
+	cholmod_resymbol.c \
+	cholmod_rowcolcounts.c \
+	cholmod_rowfac.c \
+	cholmod_solve.c \
+	cholmod_spsolve.c
+
+noinst_HEADERS = \
+	t_cholmod_lsolve.c \
+	t_cholmod_ltsolve.c \
+	t_cholmod_rowfac.c \
+	t_cholmod_solve.c
+
+noinst_LTLIBRARIES = \
+	libcholeskyi.la \
+	libcholeskyl.la \
+	libcholesky.la
+
+libcholeskyi_la_SOURCES = $(CHOLESKYSRC)
+libcholeskyi_la_LIBADD = $(COLAMD_LIBS) $(AMD_LIBS) $(SUITESPARSECONFIG_LIBS) -lm
+libcholeskyi_la_CPPFLAGS = $(AM_CPPFLAGS)
+
+libcholeskyl_la_SOURCES = $(CHOLESKYSRC)
+libcholeskyl_la_LIBADD = $(COLAMD_LIBS) $(AMD_LIBS) $(SUITESPARSECONFIG_LIBS) -lm
+libcholeskyl_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+libcholesky_la_SOURCES =
+libcholesky_la_LIBADD = libcholeskyi.la libcholeskyl.la
diff --git a/Core/Makefile.am b/Core/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Core/Makefile.am
@@ -0,0 +1,44 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	License.txt \
+	lesser.txt
+
+CORESRC = \
+	cholmod_aat.c \
+	cholmod_add.c \
+	cholmod_band.c \
+	cholmod_change_factor.c \
+	cholmod_common.c \
+	cholmod_complex.c \
+	cholmod_copy.c \
+	cholmod_dense.c \
+	cholmod_error.c \
+	cholmod_factor.c \
+	cholmod_memory.c \
+	cholmod_sparse.c \
+	cholmod_transpose.c \
+	cholmod_triplet.c \
+	cholmod_version.c
+
+noinst_HEADERS = \
+	t_cholmod_change_factor.c \
+	t_cholmod_dense.c \
+	t_cholmod_transpose.c \
+	t_cholmod_triplet.c
+
+noinst_LTLIBRARIES = \
+	libcorei.la \
+	libcorel.la \
+	libcore.la
+
+libcorei_la_SOURCES = $(CORESRC)
+libcorei_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm
+libcorei_la_CPPFLAGS = $(AM_CPPFLAGS)
+
+libcorel_la_SOURCES = $(CORESRC)
+libcorel_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm
+libcorel_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+libcore_la_SOURCES =
+libcore_la_LIBADD = libcorei.la libcorel.la
diff --git a/Demo/Makefile.am b/Demo/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Demo/Makefile.am
@@ -0,0 +1,60 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	License.txt \
+	gpl.txt
+
+dist_noinst_HEADERS = \
+	cholmod_demo.h
+
+dist_noinst_DATA = \
+	Matrix/bcsstk01.tri \
+	Matrix/lp_afiro.tri \
+	Matrix/can___24.mtx \
+	Matrix/c.tri
+
+noinst_PROGRAMS = \
+	reade \
+	readhb \
+	readhb2
+
+reade_SOURCES = reade.f
+readhb_SOURCES = readhb.f
+readhb2_SOURCES = readhb2.f
+
+if MOD_CHOLESKY
+if MOD_CHECK
+if MOD_MATRIXOPS
+
+check_PROGRAMS = \
+	cholmod_demo \
+	cholmod_l_demo \
+	cholmod_simple
+
+cholmod_demo_SOURCES = cholmod_demo.c
+cholmod_demo_LDADD = $(top_builddir)/libcholmod.la $(SUITESPARSECONFIG_LIBS)
+
+cholmod_l_demo_SOURCES = cholmod_l_demo.c
+cholmod_l_demo_LDADD = $(top_builddir)/libcholmod.la $(SUITESPARSECONFIG_LIBS)
+
+cholmod_simple_SOURCES = cholmod_simple.c
+cholmod_simple_LDADD = $(top_builddir)/libcholmod.la
+
+check-local: $(check_PROGRAMS) $(dist_noinst_DATA)
+	./cholmod_demo < $(srcdir)/Matrix/bcsstk01.tri
+	./cholmod_l_demo < $(srcdir)/Matrix/bcsstk01.tri
+	./cholmod_demo < $(srcdir)/Matrix/lp_afiro.tri
+	./cholmod_l_demo < $(srcdir)/Matrix/lp_afiro.tri
+	./cholmod_demo < $(srcdir)/Matrix/can___24.mtx
+	./cholmod_l_demo < $(srcdir)/Matrix/can___24.mtx
+	./cholmod_demo < $(srcdir)/Matrix/c.tri
+	./cholmod_l_demo < $(srcdir)/Matrix/c.tri
+	./cholmod_simple < $(srcdir)/Matrix/c.tri
+	./cholmod_simple < $(srcdir)/Matrix/can___24.mtx
+	./cholmod_simple < $(srcdir)/Matrix/bcsstk01.tri
+
+endif
+endif
+endif
+
+CLEANFILES = timelog.m
diff --git a/Doc/Makefile.am b/Doc/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Doc/Makefile.am
@@ -0,0 +1,437 @@
+EXTRA_DIST = \
+	ChangeLog
+
+dist_noinst_DATA = \
+	UserGuide.bib \
+	UserGuide.tex \
+	header.tex \
+	footer.tex \
+	mheader.tex \
+	mfooter.tex \
+	mfile.awk \
+	rule.awk
+
+dist_pdf_DATA = \
+	UserGuide.pdf
+
+dist_noinst_SCRIPTS = \
+	getmproto \
+	getproto
+
+# ./getmproto file.m > _file_m.tex
+define getmproto =
+( \
+cat $(srcdir)/mheader.tex; \
+expand -8 $< | awk -f $(srcdir)/mfile.awk; \
+cat $(srcdir)/mfooter.tex; \
+) > $@
+endef
+
+# ./getproto 'proto' header.h > _file.tex
+define getproto =
+( \
+echo -n $(PATTERN); \
+cat $(srcdir)/rule.awk; \
+) > $(basename $@).awk
+( \
+cat $(srcdir)/header.tex; \
+expand -8 $< | awk -f $(basename $@).awk; \
+cat $(srcdir)/footer.tex; \
+) > $@
+$(RM) $(basename $@).awk
+endef
+
+PROTO_M = \
+	_analyze_m.tex \
+	_bisect_m.tex \
+	_chol2_m.tex \
+	_cholmod2_m.tex \
+	_cholmod_demo_m.tex \
+	_cholmod_make_m.tex \
+	_etree2_m.tex \
+	_graph_demo_m.tex \
+	_lchol_m.tex \
+	_ldl_normest_m.tex \
+	_ldlchol_m.tex \
+	_ldlsolve_m.tex \
+	_ldlsplit_m.tex \
+	_ldlupdate_m.tex \
+	_ldlrowmod_m.tex \
+	_metis_m.tex \
+	_mread_m.tex \
+	_mwrite_m.tex \
+	_nesdis_m.tex \
+	_resymbol_m.tex \
+	_sdmult_m.tex \
+	_sparse2_m.tex \
+	_spsym_m.tex \
+	_symbfact2_m.tex
+
+$(PROTO_M): mheader.tex mfile.awk mfooter.tex
+_%_m.tex: $(top_srcdir)/MATLAB/%.m
+	$(getmproto)
+
+PROTO_SIMPLE = \
+	_simple.tex
+
+_simple.tex: PATTERN = '/include/, /^}/'
+
+$(PROTO_SIMPLE): $(top_srcdir)/Demo/cholmod_simple.c header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_CORE = \
+	_common.tex \
+	_start.tex \
+	_finish.tex \
+	_defaults.tex \
+	_maxrank.tex \
+	_allocate_work.tex \
+	_free_work.tex \
+	_clear_flag.tex \
+	_error.tex \
+	_dbound.tex \
+	_hypot.tex \
+	_divcomplex.tex \
+	_sparse.tex \
+	_allocate_sparse.tex \
+	_free_sparse.tex \
+	_reallocate_sparse.tex \
+	_nnz.tex \
+	_speye.tex \
+	_spzeros.tex \
+	_transpose.tex \
+	_transpose_unsym.tex \
+	_transpose_sym.tex \
+	_ptranspose.tex \
+	_sort.tex \
+	_band.tex \
+	_band_inplace.tex \
+	_aat.tex \
+	_copy_sparse.tex \
+	_copy.tex \
+	_add.tex \
+	_sparse_xtype.tex \
+	_factor.tex \
+	_allocate_factor.tex \
+	_free_factor.tex \
+	_reallocate_factor.tex \
+	_change_factor.tex \
+	_pack_factor.tex \
+	_reallocate_column.tex \
+	_factor_to_sparse.tex \
+	_copy_factor.tex \
+	_factor_xtype.tex \
+	_dense.tex \
+	_allocate_dense.tex \
+	_ensure_dense.tex \
+	_zeros.tex \
+	_ones.tex \
+	_eye.tex \
+	_free_dense.tex \
+	_sparse_to_dense.tex \
+	_dense_to_sparse.tex \
+	_copy_dense.tex \
+	_copy_dense2.tex \
+	_dense_xtype.tex \
+	_triplet.tex \
+	_allocate_triplet.tex \
+	_free_triplet.tex \
+	_reallocate_triplet.tex \
+	_sparse_to_triplet.tex \
+	_triplet_to_sparse.tex \
+	_copy_triplet.tex \
+	_triplet_xtype.tex \
+	_malloc.tex \
+	_calloc.tex \
+	_free.tex \
+	_realloc.tex \
+	_realloc_multiple.tex \
+	_version.tex \
+	_defn.tex
+
+_common.tex: PATTERN = '/typedef struct cholmod_common/, /^}/'
+_start.tex: PATTERN = '/int cholmod_start/, /\*\) ;/'
+_finish.tex: PATTERN = '/int cholmod_finish/, /\*\) ;/'
+_defaults.tex: PATTERN = '/int cholmod_defaults/, /\*\) ;/'
+_maxrank.tex: PATTERN = '/size_t cholmod_maxrank/, /\*\) ;/'
+_allocate_work.tex: PATTERN = '/int cholmod_allocate_work/, /\*\) ;/'
+_free_work.tex: PATTERN = '/int cholmod_free_work/, /\*\) ;/'
+_clear_flag.tex: PATTERN = '/long cholmod_clear_flag/, /\*\) ;/'
+_error.tex: PATTERN = '/int cholmod_error/, /\*\) ;/'
+_dbound.tex: PATTERN = '/double cholmod_dbound/, /\*\) ;/'
+_hypot.tex: PATTERN = '/double cholmod_hypot/, /double\) ;/'
+_divcomplex.tex: PATTERN = '/int cholmod_divcomplex/, /\*\) ;/'
+_sparse.tex: PATTERN = '/typedef struct cholmod_sparse/, /^}/'
+_allocate_sparse.tex: PATTERN = '/cholmod_sparse \*cholmod_allocate_sparse/, /\*\) ;/'
+_free_sparse.tex: PATTERN = '/int cholmod_free_sparse/, /\*\) ;/'
+_reallocate_sparse.tex: PATTERN = '/int cholmod_reallocate_sparse/, /\*\) ;/'
+_nnz.tex: PATTERN = '/long cholmod_nnz/, /\*\) ;/'
+_speye.tex: PATTERN = '/cholmod_sparse \*cholmod_speye/, /\*\) ;/'
+_spzeros.tex: PATTERN = '/cholmod_sparse \*cholmod_spzeros/, /\*\) ;/'
+_transpose.tex: PATTERN = '/cholmod_sparse \*cholmod_transpose/, /\*\) ;/'
+_transpose_unsym.tex: PATTERN = '/int cholmod_transpose_unsym/, /\*\) ;/'
+_transpose_sym.tex: PATTERN = '/int cholmod_transpose_sym/, /\*\) ;/'
+_ptranspose.tex: PATTERN = '/cholmod_sparse \*cholmod_ptranspose/, /\*\) ;/'
+_sort.tex: PATTERN = '/int cholmod_sort/, /\*\) ;/'
+_band.tex: PATTERN = '/cholmod_sparse \*cholmod_band/, /\*\) ;/'
+_band_inplace.tex: PATTERN = '/int cholmod_band_inplace/, /\*\) ;/'
+_aat.tex: PATTERN = '/cholmod_sparse \*cholmod_aat/, /\*\) ;/'
+_copy_sparse.tex: PATTERN = '/cholmod_sparse \*cholmod_copy_sparse/, /\*\) ;/'
+_copy.tex: PATTERN = '/cholmod_sparse \*cholmod_copy /, /\*\) ;/'
+_add.tex: PATTERN = '/cholmod_sparse \*cholmod_add/, /\*\) ;/'
+_sparse_xtype.tex: PATTERN = '/int cholmod_sparse_xtype/, /\*\) ;/'
+_factor.tex: PATTERN = '/typedef struct cholmod_factor/, /^}/'
+_allocate_factor.tex: PATTERN = '/cholmod_factor \*cholmod_allocate_factor/, /\*\) ;/'
+_free_factor.tex: PATTERN = '/int cholmod_free_factor/, /\*\) ;/'
+_reallocate_factor.tex: PATTERN = '/int cholmod_reallocate_factor/, /\*\) ;/'
+_change_factor.tex: PATTERN = '/int cholmod_change_factor/, /\*\) ;/'
+_pack_factor.tex: PATTERN = '/int cholmod_pack_factor/, /\*\) ;/'
+_reallocate_column.tex: PATTERN = '/int cholmod_reallocate_column/, /\*\) ;/'
+_factor_to_sparse.tex: PATTERN = '/cholmod_sparse \*cholmod_factor_to_sparse/, /\*\) ;/'
+_copy_factor.tex: PATTERN = '/cholmod_factor \*cholmod_copy_factor/, /\*\) ;/'
+_factor_xtype.tex: PATTERN = '/int cholmod_factor_xtype/, /\*\) ;/'
+_dense.tex: PATTERN = '/typedef struct cholmod_dense/, /^}/'
+_allocate_dense.tex: PATTERN = '/cholmod_dense \*cholmod_allocate_dense/, /\*\) ;/'
+_ensure_dense.tex: PATTERN = '/cholmod_dense \*cholmod_ensure_dense/, /\*\) ;/'
+_zeros.tex: PATTERN = '/cholmod_dense \*cholmod_zeros/, /\*\) ;/'
+_ones.tex: PATTERN = '/cholmod_dense \*cholmod_ones/, /\*\) ;/'
+_eye.tex: PATTERN = '/cholmod_dense \*cholmod_eye/, /\*\) ;/'
+_free_dense.tex: PATTERN = '/int cholmod_free_dense/, /\*\) ;/'
+_sparse_to_dense.tex: PATTERN = '/cholmod_dense \*cholmod_sparse_to_dense/, /\*\) ;/'
+_dense_to_sparse.tex: PATTERN = '/cholmod_sparse \*cholmod_dense_to_sparse/, /\*\) ;/'
+_copy_dense.tex: PATTERN = '/cholmod_dense \*cholmod_copy_dense/, /\*\) ;/'
+_copy_dense2.tex: PATTERN = '/int cholmod_copy_dense2/, /\*\) ;/'
+_dense_xtype.tex: PATTERN = '/int cholmod_dense_xtype/, /\*\) ;/'
+_triplet.tex: PATTERN = '/typedef struct cholmod_triplet/, /^}/'
+_allocate_triplet.tex: PATTERN = '/cholmod_triplet \*cholmod_allocate_triplet/, /\*\) ;/'
+_free_triplet.tex: PATTERN = '/int cholmod_free_triplet/, /\*\) ;/'
+_reallocate_triplet.tex: PATTERN = '/int cholmod_reallocate_triplet/, /\*\) ;/'
+_sparse_to_triplet.tex: PATTERN = '/cholmod_triplet \*cholmod_sparse_to_triplet/, /\*\) ;/'
+_triplet_to_sparse.tex: PATTERN = '/cholmod_sparse \*cholmod_triplet_to_sparse/, /\*\) ;/'
+_copy_triplet.tex: PATTERN = '/cholmod_triplet \*cholmod_copy_triplet/, /\*\) ;/'
+_triplet_xtype.tex: PATTERN = '/int cholmod_triplet_xtype/, /\*\) ;/'
+_malloc.tex: PATTERN = '/void \*cholmod_malloc/, /\*\) ;/'
+_calloc.tex: PATTERN = '/void \*cholmod_calloc/, /\*\) ;/'
+_free.tex: PATTERN = '/void \*cholmod_free/, /\*\) ;/'
+_realloc.tex: PATTERN = '/void \*cholmod_realloc/, /\*\) ;/'
+_realloc_multiple.tex: PATTERN = '/int cholmod_realloc_multiple/, /\*\) ;/'
+_version.tex: PATTERN = '/int cholmod_version/, /l_version/'
+_defn.tex: PATTERN = '/itype defines the/, /define CHOLMOD_SUPERNODAL/'
+
+$(PROTO_CORE): $(top_srcdir)/Include/cholmod_core.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_CHECK = \
+	_check_common.tex \
+	_print_common.tex \
+	_check_sparse.tex \
+	_print_sparse.tex \
+	_check_dense.tex \
+	_print_dense.tex \
+	_check_factor.tex \
+	_print_factor.tex \
+	_check_triplet.tex \
+	_print_triplet.tex \
+	_check_subset.tex \
+	_print_subset.tex \
+	_check_perm.tex \
+	_print_perm.tex \
+	_check_parent.tex \
+	_print_parent.tex \
+	_read_triplet.tex \
+	_read_sparse.tex \
+	_read_dense.tex \
+	_read_matrix.tex \
+	_write_sparse.tex \
+	_write_dense.tex
+
+_check_common.tex: PATTERN = '/int cholmod_check_common/, /\*\) ;/'
+_print_common.tex: PATTERN = '/int cholmod_print_common/, /\*\) ;/'
+_check_sparse.tex: PATTERN = '/int cholmod_check_sparse/, /\*\) ;/'
+_print_sparse.tex: PATTERN = '/int cholmod_print_sparse/, /\*\) ;/'
+_check_dense.tex: PATTERN = '/int cholmod_check_dense/, /\*\) ;/'
+_print_dense.tex: PATTERN = '/int cholmod_print_dense/, /\*\) ;/'
+_check_factor.tex: PATTERN = '/int cholmod_check_factor/, /\*\) ;/'
+_print_factor.tex: PATTERN = '/int cholmod_print_factor/, /\*\) ;/'
+_check_triplet.tex: PATTERN = '/int cholmod_check_triplet/, /\*\) ;/'
+_print_triplet.tex: PATTERN = '/int cholmod_print_triplet/, /\*\) ;/'
+_check_subset.tex: PATTERN = '/int cholmod_check_subset/, /\*\) ;/'
+_print_subset.tex: PATTERN = '/int cholmod_print_subset/, /\*\) ;/'
+_check_perm.tex: PATTERN = '/int cholmod_check_perm/, /\*\) ;/'
+_print_perm.tex: PATTERN = '/int cholmod_print_perm/, /\*\) ;/'
+_check_parent.tex: PATTERN = '/int cholmod_check_parent/, /\*\) ;/'
+_print_parent.tex: PATTERN = '/int cholmod_print_parent/, /\*\) ;/'
+_read_triplet.tex: PATTERN = '/cholmod_triplet \*cholmod_read_triplet/, /\*\) ;/'
+_read_sparse.tex: PATTERN = '/cholmod_sparse \*cholmod_read_sparse/, /\*\) ;/'
+_read_dense.tex: PATTERN = '/cholmod_dense \*cholmod_read_dense/, /\*\) ;/'
+_read_matrix.tex: PATTERN = '/void \*cholmod_read_matrix/, /\*\) ;/'
+_write_sparse.tex: PATTERN = '/int cholmod_write_sparse/, /\*\) ;/'
+_write_dense.tex: PATTERN = '/int cholmod_write_dense/, /\*\) ;/'
+
+$(PROTO_CHECK): $(top_srcdir)/Include/cholmod_check.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_CHOLESKY = \
+	_analyze.tex \
+	_analyze_p.tex \
+	_factorize.tex \
+	_factorize_p.tex \
+	_solve.tex \
+	_solve2.tex \
+	_spsolve.tex \
+	_etree.tex \
+	_rowcolcounts.tex \
+	_analyze_ordering.tex \
+	_amd.tex \
+	_colamd.tex \
+	_rowfac.tex \
+	_rowfac_mask.tex \
+	_row_subtree.tex \
+	_row_lsubtree.tex \
+	_lsolve_pattern.tex \
+	_resymbol.tex \
+	_resymbol_noperm.tex \
+	_rcond.tex \
+	_postorder.tex
+
+_analyze.tex: PATTERN = '/cholmod_factor \*cholmod_analyze /, /\*\) ;/'
+_analyze_p.tex: PATTERN = '/cholmod_factor \*cholmod_analyze_p/, /\*\) ;/'
+_factorize.tex: PATTERN = '/int cholmod_factorize /, /\*\) ;/'
+_factorize_p.tex: PATTERN = '/int cholmod_factorize_p/, /\*\) ;/'
+_solve.tex: PATTERN = '/cholmod_dense \*cholmod_solve/, /\*\) ;/'
+_solve2.tex: PATTERN = '/int cholmod_solve2/, /\*\) ;/'
+_spsolve.tex: PATTERN = '/cholmod_sparse \*cholmod_spsolve/, /\*\) ;/'
+_etree.tex: PATTERN = '/int cholmod_etree/, /\*\) ;/'
+_rowcolcounts.tex: PATTERN = '/int cholmod_rowcolcounts/, /\*\) ;/'
+_analyze_ordering.tex: PATTERN = '/int cholmod_analyze_ordering/, /\*\) ;/'
+_amd.tex: PATTERN = '/int cholmod_amd/, /\*\) ;/'
+_colamd.tex: PATTERN = '/int cholmod_colamd/, /\*\) ;/'
+_rowfac.tex: PATTERN = '/int cholmod_rowfac/, /\*\) ;/'
+_rowfac_mask.tex: PATTERN = '/int cholmod_rowfac_mask/, /\*\) ;/'
+_row_subtree.tex: PATTERN = '/int cholmod_row_subtree/, /\*\) ;/'
+_row_lsubtree.tex: PATTERN = '/int cholmod_row_lsubtree/, /\*\) ;/'
+_lsolve_pattern.tex: PATTERN = '/int cholmod_lsolve_pattern/, /\*\) ;/'
+_resymbol.tex: PATTERN = '/int cholmod_resymbol /, /\*\) ;/'
+_resymbol_noperm.tex: PATTERN = '/int cholmod_resymbol_noperm/, /\*\) ;/'
+_rcond.tex: PATTERN = '/double cholmod_rcond/, /\*\) ;/'
+_postorder.tex: PATTERN = '/long cholmod_postorder/, /\*\) ;/'
+
+$(PROTO_CHOLESKY): $(top_srcdir)/Include/cholmod_cholesky.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_MODIFY = \
+	_updown.tex \
+	_updown_solve.tex \
+	_updown_mark.tex \
+	_updown_mask.tex \
+	_rowadd.tex \
+	_rowadd_solve.tex \
+	_rowadd_mark.tex \
+	_rowdel.tex \
+	_rowdel_solve.tex \
+	_rowdel_mark.tex
+
+_updown.tex: PATTERN = '/int cholmod_updown /, /\*\) ;/'
+_updown_solve.tex: PATTERN = '/int cholmod_updown_solve/, /\*\) ;/'
+_updown_mark.tex: PATTERN = '/int cholmod_updown_mark/, /\*\) ;/'
+_updown_mask.tex: PATTERN = '/int cholmod_updown_mask/, /\*\) ;/'
+_rowadd.tex: PATTERN = '/int cholmod_rowadd /, /\*\) ;/'
+_rowadd_solve.tex: PATTERN = '/int cholmod_rowadd_solve/, /\*\) ;/'
+_rowadd_mark.tex: PATTERN = '/int cholmod_rowadd_mark/, /\*\) ;/'
+_rowdel.tex: PATTERN = '/int cholmod_rowdel /, /\*\) ;/'
+_rowdel_solve.tex: PATTERN = '/int cholmod_rowdel_solve/, /\*\) ;/'
+_rowdel_mark.tex: PATTERN = '/int cholmod_rowdel_mark/, /\*\) ;/'
+
+$(PROTO_MODIFY): $(top_srcdir)/Include/cholmod_modify.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_MATRIXOPS = \
+	_drop.tex \
+	_norm_dense.tex \
+	_norm_sparse.tex \
+	_horzcat.tex \
+	_scale.tex \
+	_sdmult.tex \
+	_ssmult.tex \
+	_submatrix.tex \
+	_vertcat.tex \
+	_symmetry.tex
+
+_drop.tex: PATTERN = '/int cholmod_drop/, /\*\) ;/'
+_norm_dense.tex: PATTERN = '/double cholmod_norm_dense/, /\*\) ;/'
+_norm_sparse.tex: PATTERN = '/double cholmod_norm_sparse/, /\*\) ;/'
+_horzcat.tex: PATTERN = '/cholmod_sparse \*cholmod_horzcat/, /\*\) ;/'
+_scale.tex: PATTERN = '/define CHOLMOD_SCALAR/, /\*\) ;/'
+_sdmult.tex: PATTERN = '/int cholmod_sdmult/, /\*\) ;/'
+_ssmult.tex: PATTERN = '/cholmod_sparse \*cholmod_ssmult/, /\*\) ;/'
+_submatrix.tex: PATTERN = '/cholmod_sparse \*cholmod_submatrix/, /\*\) ;/'
+_vertcat.tex: PATTERN = '/cholmod_sparse \*cholmod_vertcat/, /\*\) ;/'
+_symmetry.tex: PATTERN = '/int cholmod_symmetry/, /\*\) ;/'
+
+$(PROTO_MATRIXOPS): $(top_srcdir)/Include/cholmod_matrixops.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_SUPERNODAL = \
+	_super_symbolic.tex \
+	_super_numeric.tex \
+	_super_lsolve.tex \
+	_super_ltsolve.tex
+
+_super_symbolic.tex: PATTERN = '/int cholmod_super_symbolic/, /\*\) ;/'
+_super_numeric.tex: PATTERN = '/int cholmod_super_numeric/, /\*\) ;/'
+_super_lsolve.tex: PATTERN = '/int cholmod_super_lsolve/, /\*\) ;/'
+_super_ltsolve.tex: PATTERN = '/int cholmod_super_ltsolve/, /\*\) ;/'
+
+$(PROTO_SUPERNODAL): $(top_srcdir)/Include/cholmod_supernodal.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO_PARTITION = \
+	_nested_dissection.tex \
+	_metis.tex \
+	_ccolamd.tex \
+	_camd.tex \
+	_csymamd.tex \
+	_bisect.tex \
+	_metis_bisector.tex \
+	_collapse_septree.tex
+
+_nested_dissection.tex: PATTERN = '/long cholmod_nested_dissection/, /\*\) ;/'
+_metis.tex: PATTERN = '/int cholmod_metis/, /\*\) ;/'
+_ccolamd.tex: PATTERN = '/int cholmod_ccolamd/, /\*\) ;/'
+_camd.tex: PATTERN = '/int cholmod_camd/, /\*\) ;/'
+_csymamd.tex: PATTERN = '/int cholmod_csymamd/, /\*\) ;/'
+_bisect.tex: PATTERN = '/long cholmod_bisect/, /\*\) ;/'
+_metis_bisector.tex: PATTERN = '/long cholmod_metis_bisector/, /\*\) ;/'
+_collapse_septree.tex: PATTERN = '/long cholmod_collapse_septree/, /\*\) ;/'
+
+$(PROTO_PARTITION): $(top_srcdir)/Include/cholmod_partition.h header.tex rule.awk footer.tex
+	$(getproto)
+
+PROTO = \
+	$(PROTO_M) \
+	$(PROTO_SIMPLE) \
+	$(PROTO_CORE) \
+	$(PROTO_CHECK) \
+	$(PROTO_CHOLESKY) \
+	$(PROTO_MODIFY) \
+	$(PROTO_MATRIXOPS) \
+	$(PROTO_SUPERNODAL) \
+	$(PROTO_PARTITION)
+
+UserGuide.pdf UserGuide.aux: $(PROTO)
+.INTERMEDIATE: UserGuide.aux $(PROTO)
+
+TEX = TEXINPUTS="$(srcdir):" pdflatex -interaction nonstopmode -file-line-error
+BIB = BIBINPUTS="$(srcdir):" bibtex
+%.pdf: %.tex %.bbl
+	$(TEX) $*
+	while grep -q "Rerun to get cross-references right" $*.log; do \
+		$(TEX) $*; \
+	done
+%.bbl: %.aux %.bib
+	$(BIB) $*
+%.aux: %.tex
+	$(TEX) $*
+
+CLEANFILES = _*.awk _*.tex *.dvi *.aux *.log *.lof *.lot *.toc *.bak *.bbl *.blg
+MAINTAINERCLEANFILES = $(dist_pdf_DATA)
diff --git a/GPU/Makefile.am b/GPU/Makefile.am
new file mode 100644
--- /dev/null
+++ b/GPU/Makefile.am
@@ -0,0 +1,25 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+GPUSRC = \
+	cholmod_gpu.c
+
+EXTRA_DIST = \
+	cholmod_gpu_kernels.c \
+	cholmod_gpu_kernels.cu
+
+noinst_HEADERS = \
+	t_cholmod_gpu.c
+
+noinst_LTLIBRARIES = \
+	libgpui.la \
+	libgpul.la \
+	libgpu.la
+
+libgpui_la_SOURCES = $(GPUSRC)
+libgpui_la_CPPFLAGS = $(AM_CPPFLAGS)
+
+libgpul_la_SOURCES = $(GPUSRC)
+libgpul_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+libgpu_la_SOURCES =
+libgpu_la_LIBADD = libgpui.la libgpul.la
diff --git a/Include/Makefile.am b/Include/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Include/Makefile.am
@@ -0,0 +1,45 @@
+EXTRA_DIST = \
+	License.txt \
+	README.txt
+
+# Automatically generated headers
+nodist_pkginclude_HEADERS = \
+	cholmod_config.h
+
+pkginclude_HEADERS = \
+	cholmod.h \
+	cholmod_blas.h \
+	cholmod_core.h \
+	cholmod_function.h \
+	cholmod_gpu.h \
+	cholmod_io64.h
+
+noinst_HEADERS = \
+	cholmod_complexity.h \
+	cholmod_gpu_kernels.h \
+	cholmod_internal.h \
+	cholmod_template.h
+
+if MOD_CHECK
+pkginclude_HEADERS += cholmod_check.h
+endif
+
+if MOD_CHOLESKY
+pkginclude_HEADERS += cholmod_cholesky.h
+endif
+
+if MOD_PARTITION
+pkginclude_HEADERS += cholmod_camd.h cholmod_partition.h
+endif
+
+if MOD_MATRIXOPS
+pkginclude_HEADERS += cholmod_matrixops.h
+endif
+
+if MOD_MODIFY
+pkginclude_HEADERS += cholmod_modify.h
+endif
+
+if MOD_SUPERNODAL
+pkginclude_HEADERS += cholmod_supernodal.h
+endif
diff --git a/Include/cholmod_config.h b/Include/cholmod_config.h.in
rename from Include/cholmod_config.h
rename to Include/cholmod_config.h.in
--- a/Include/cholmod_config.h
+++ b/Include/cholmod_config.h.in
@@ -54,17 +54,31 @@
 /* Use the compiler flag, or uncomment the definition(s), if you want to use
  * one or more non-default installation options: */
 
-/*
-#define NCHECK
-#define NCHOLESKY
-#define NCAMD
-#define NPARTITION
+/* Define to disable the Check module */
+#undef NCHECK
 
-#define NGPL  
-#define NMATRIXOPS
-#define NMODIFY
-#define NSUPERNODAL
+/* Define to disable the Cholesky module */
+#undef NCHOLESKY
+
+/* Define to disable the Partition module */
+#undef NCAMD
+
+/* Define to disable metis support in the Partition module */
+#undef NPARTITION
 
+/* Define to disable GPL-licensed modules */
+#undef NGPL
+
+/* Define to disable the MatrixOps module */
+#undef NMATRIXOPS
+
+/* Define to disable the Modify module */
+#undef NMODIFY
+
+/* Define to disable the Supernodal module */
+#undef NSUPERNODAL
+
+/*
 #define NPRINT
 
 #define LONGBLAS long
diff --git a/MATLAB/Makefile.am b/MATLAB/Makefile.am
new file mode 100644
--- /dev/null
+++ b/MATLAB/Makefile.am
@@ -0,0 +1,26 @@
+# Needed by Doc/Makefile.am
+EXTRA_DIST = \
+	analyze.m \
+	bisect.m \
+	chol2.m \
+	cholmod2.m \
+	cholmod_demo.m \
+	cholmod_make.m \
+	etree2.m \
+	graph_demo.m \
+	lchol.m \
+	ldl_normest.m \
+	ldlchol.m \
+	ldlsolve.m \
+	ldlsplit.m \
+	ldlupdate.m \
+	ldlrowmod.m \
+	metis.m \
+	mread.m \
+	mwrite.m \
+	nesdis.m \
+	resymbol.m \
+	sdmult.m \
+	sparse2.m \
+	spsym.m \
+	symbfact2.m
diff --git a/Makefile.am b/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Makefile.am
@@ -0,0 +1,46 @@
+SUBDIRS = Include Core
+EXTRA_DIST = README.txt
+
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = cholmod.pc
+
+lib_LTLIBRARIES = libcholmod.la
+
+libcholmod_la_SOURCES =
+libcholmod_la_LIBADD = $(top_builddir)/Core/libcore.la
+libcholmod_la_LDFLAGS = -no-undefined -release $(PACKAGE_VERSION)
+
+if MOD_CHECK
+SUBDIRS += Check
+libcholmod_la_LIBADD += $(top_builddir)/Check/libcheck.la
+endif
+
+if MOD_CHOLESKY
+SUBDIRS += Cholesky
+libcholmod_la_LIBADD += $(top_builddir)/Cholesky/libcholesky.la
+endif
+
+if MOD_PARTITION
+SUBDIRS += Partition
+libcholmod_la_LIBADD += $(top_builddir)/Partition/libpartition.la
+endif
+
+if MOD_MATRIXOPS
+SUBDIRS += MatrixOps
+libcholmod_la_LIBADD += $(top_builddir)/MatrixOps/libmatrixops.la
+endif
+
+if MOD_MODIFY
+SUBDIRS += Modify
+libcholmod_la_LIBADD += $(top_builddir)/Modify/libmodify.la
+endif
+
+if MOD_SUPERNODAL
+SUBDIRS += Supernodal
+libcholmod_la_LIBADD += $(top_builddir)/Supernodal/libsupernodal.la
+endif
+
+#SUBDIRS += GPU
+#libcholmod_la_LIBADD += $(top_builddir)/GPU/libgpu.la
+
+SUBDIRS += MATLAB Demo Doc
diff --git a/MatrixOps/Makefile.am b/MatrixOps/Makefile.am
new file mode 100644
--- /dev/null
+++ b/MatrixOps/Makefile.am
@@ -0,0 +1,35 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	License.txt \
+	gpl.txt
+
+MATRIXOPSSRC = \
+	cholmod_drop.c \
+	cholmod_horzcat.c \
+	cholmod_norm.c \
+	cholmod_scale.c \
+	cholmod_sdmult.c \
+	cholmod_ssmult.c \
+	cholmod_submatrix.c \
+	cholmod_symmetry.c \
+	cholmod_vertcat.c
+
+noinst_HEADERS = \
+	t_cholmod_sdmult.c
+
+noinst_LTLIBRARIES = \
+	libmatrixopsi.la \
+	libmatrixopsl.la \
+	libmatrixops.la
+
+libmatrixopsi_la_SOURCES = $(MATRIXOPSSRC)
+libmatrixopsi_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm
+libmatrixopsi_la_CPPFLAGS = $(AM_CPPFLAGS)
+
+libmatrixopsl_la_SOURCES = $(MATRIXOPSSRC)
+libmatrixopsl_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm
+libmatrixopsl_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+libmatrixops_la_SOURCES =
+libmatrixops_la_LIBADD = libmatrixopsi.la libmatrixopsl.la
diff --git a/Modify/Makefile.am b/Modify/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Modify/Makefile.am
@@ -0,0 +1,30 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	License.txt \
+	gpl.txt
+
+MODIFYSRC = \
+	cholmod_rowadd.c \
+	cholmod_rowdel.c \
+	cholmod_updown.c
+
+noinst_HEADERS = \
+	t_cholmod_updown.c \
+	t_cholmod_updown_numkr.c
+
+noinst_LTLIBRARIES = \
+	libmodifyi.la \
+	libmodifyl.la \
+	libmodify.la
+
+libmodifyi_la_SOURCES = $(MODIFYSRC)
+libmodifyi_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm
+libmodifyi_la_CPPFLAGS = $(AM_CPPFLAGS)
+
+libmodifyl_la_SOURCES = $(MODIFYSRC)
+libmodifyl_la_LIBADD = $(SUITESPARSECONFIG_LIBS) -lm
+libmodifyl_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+libmodify_la_SOURCES =
+libmodify_la_LIBADD = libmodifyi.la libmodifyl.la
diff --git a/Partition/Makefile.am b/Partition/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Partition/Makefile.am
@@ -0,0 +1,28 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(METIS_CFLAGS) $(CCOLAMD_CFLAGS) $(CAMD_CFLAGS) $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	License.txt \
+	lesser.txt
+
+PARTITIONSRC = \
+	cholmod_camd.c \
+	cholmod_ccolamd.c \
+	cholmod_csymamd.c \
+	cholmod_metis.c \
+	cholmod_nesdis.c
+
+noinst_LTLIBRARIES = \
+	libpartitioni.la \
+	libpartitionl.la \
+	libpartition.la
+
+libpartitioni_la_SOURCES = $(PARTITIONSRC)
+libpartitioni_la_LIBADD = $(METIS_LIBS) $(CCOLAMD_LIBS) $(CAMD_LIBS) $(SUITESPARSECONFIG_LIBS) -lm
+libpartitioni_la_CPPFLAGS = $(AM_CPPFLAGS)
+
+libpartitionl_la_SOURCES = $(PARTITIONSRC)
+libpartitionl_la_LIBADD = $(METIS_LIBS) $(CCOLAMD_LIBS) $(CAMD_LIBS) $(SUITESPARSECONFIG_LIBS) -lm
+libpartitionl_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+libpartition_la_SOURCES =
+libpartition_la_LIBADD = libpartitioni.la libpartitionl.la
diff --git a/Partition/cholmod_camd.c b/Partition/cholmod_camd.c
--- a/Partition/cholmod_camd.c
+++ b/Partition/cholmod_camd.c
@@ -32,6 +32,7 @@
  * Supports any xtype (pattern, real, complex, or zomplex)
  */
 
+#include "cholmod_config.h"
 #ifndef NCAMD
 
 #include "cholmod_internal.h"
diff --git a/Partition/cholmod_ccolamd.c b/Partition/cholmod_ccolamd.c
--- a/Partition/cholmod_ccolamd.c
+++ b/Partition/cholmod_ccolamd.c
@@ -22,6 +22,7 @@
  * Supports any xtype (pattern, real, complex, or zomplex).
  */
 
+#include "cholmod_config.h"
 #ifndef NCAMD
 
 #include "cholmod_internal.h"
diff --git a/Partition/cholmod_csymamd.c b/Partition/cholmod_csymamd.c
--- a/Partition/cholmod_csymamd.c
+++ b/Partition/cholmod_csymamd.c
@@ -21,6 +21,7 @@
  * Supports any xtype (pattern, real, complex, or zomplex).
  */
 
+#include "cholmod_config.h"
 #ifndef NCAMD
 
 #include "cholmod_internal.h"
diff --git a/Partition/cholmod_metis.c b/Partition/cholmod_metis.c
--- a/Partition/cholmod_metis.c
+++ b/Partition/cholmod_metis.c
@@ -43,6 +43,7 @@
  * Supports any xtype (pattern, real, complex, or zomplex).
  */
 
+#include "cholmod_config.h"
 #ifndef NPARTITION
 
 #include "cholmod_internal.h"
diff --git a/Partition/cholmod_nesdis.c b/Partition/cholmod_nesdis.c
--- a/Partition/cholmod_nesdis.c
+++ b/Partition/cholmod_nesdis.c
@@ -38,6 +38,7 @@
  * Supports any xtype (pattern, real, complex, or zomplex).
  */
 
+#include "cholmod_config.h"
 #ifndef NPARTITION
 
 #include "cholmod_internal.h"
diff --git a/Supernodal/Makefile.am b/Supernodal/Makefile.am
new file mode 100644
--- /dev/null
+++ b/Supernodal/Makefile.am
@@ -0,0 +1,35 @@
+AM_CPPFLAGS = -I$(top_srcdir)/Include $(SUITESPARSECONFIG_CFLAGS)
+
+EXTRA_DIST = \
+	License.txt \
+	gpl.txt
+
+SUPERNODALSRC = \
+	cholmod_super_numeric.c \
+	cholmod_super_solve.c \
+	cholmod_super_symbolic.c
+
+noinst_HEADERS = \
+	t_cholmod_super_numeric.c \
+	t_cholmod_super_solve.c
+
+noinst_LTLIBRARIES = \
+	libsupernodali.la \
+	libsupernodall.la \
+	libsupernodal.la
+
+libsupernodali_la_SOURCES = $(SUPERNODALSRC)
+libsupernodali_la_LIBADD = $(LAPACK_LIBS) $(BLAS_LIBS) $(SUITESPARSECONFIG_LIBS)
+libsupernodali_la_CPPFLAGS = $(AM_CPPFLAGS)
+
+libsupernodall_la_SOURCES = $(SUPERNODALSRC)
+libsupernodall_la_LIBADD = $(LAPACK_LIBS) $(BLAS_LIBS) $(SUITESPARSECONFIG_LIBS)
+libsupernodall_la_CPPFLAGS = $(AM_CPPFLAGS) -DDLONG
+
+if !TIMING
+libsupernodali_la_CPPFLAGS += -DNTIMER
+libsupernodall_la_CPPFLAGS += -DNTIMER
+endif
+
+libsupernodal_la_SOURCES =
+libsupernodal_la_LIBADD = libsupernodali.la libsupernodall.la
diff --git a/ax_blas.m4 b/ax_blas.m4
new file mode 100644
--- /dev/null
+++ b/ax_blas.m4
@@ -0,0 +1,238 @@
+# ===========================================================================
+#          http://www.gnu.org/software/autoconf-archive/ax_blas.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_BLAS([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])
+#
+# DESCRIPTION
+#
+#   This macro looks for a library that implements the BLAS linear-algebra
+#   interface (see http://www.netlib.org/blas/). On success, it sets the
+#   BLAS_LIBS output variable to hold the requisite library linkages.
+#
+#   To link with BLAS, you should link with:
+#
+#     $BLAS_LIBS $LIBS $FLIBS
+#
+#   in that order. FLIBS is the output variable of the
+#   AC_F77_LIBRARY_LDFLAGS macro (called if necessary by AX_BLAS), and is
+#   sometimes necessary in order to link with F77 libraries. Users will also
+#   need to use AC_F77_DUMMY_MAIN (see the autoconf manual), for the same
+#   reason.
+#
+#   Many libraries are searched for, from ATLAS to CXML to ESSL. The user
+#   may also use --with-blas=<lib> in order to use some specific BLAS
+#   library <lib>. In order to link successfully, however, be aware that you
+#   will probably need to use the same Fortran compiler (which can be set
+#   via the F77 env. var.) as was used to compile the BLAS library.
+#
+#   ACTION-IF-FOUND is a list of shell commands to run if a BLAS library is
+#   found, and ACTION-IF-NOT-FOUND is a list of commands to run it if it is
+#   not found. If ACTION-IF-FOUND is not specified, the default action will
+#   define HAVE_BLAS.
+#
+# LICENSE
+#
+#   Copyright (c) 2008 Steven G. Johnson <stevenj@alum.mit.edu>
+#
+#   This program is free software: you can redistribute it and/or modify it
+#   under the terms of the GNU General Public License as published by the
+#   Free Software Foundation, either version 3 of the License, or (at your
+#   option) any later version.
+#
+#   This program is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
+#   Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License along
+#   with this program. If not, see <http://www.gnu.org/licenses/>.
+#
+#   As a special exception, the respective Autoconf Macro's copyright owner
+#   gives unlimited permission to copy, distribute and modify the configure
+#   scripts that are the output of Autoconf when processing the Macro. You
+#   need not follow the terms of the GNU General Public License when using
+#   or distributing such scripts, even though portions of the text of the
+#   Macro appear in them. The GNU General Public License (GPL) does govern
+#   all other use of the material that constitutes the Autoconf Macro.
+#
+#   This special exception to the GPL applies to versions of the Autoconf
+#   Macro released by the Autoconf Archive. When you make and distribute a
+#   modified version of the Autoconf Macro, you may extend this special
+#   exception to the GPL to apply to your modified version as well.
+
+#serial 14
+
+AU_ALIAS([ACX_BLAS], [AX_BLAS])
+AC_DEFUN([AX_BLAS], [
+AC_PREREQ(2.50)
+AC_REQUIRE([AC_F77_LIBRARY_LDFLAGS])
+AC_REQUIRE([AC_CANONICAL_HOST])
+ax_blas_ok=no
+
+AC_ARG_WITH(blas,
+	[AS_HELP_STRING([--with-blas=<lib>], [use BLAS library <lib>])])
+case $with_blas in
+	yes | "") ;;
+	no) ax_blas_ok=disable ;;
+	-* | */* | *.a | *.so | *.so.* | *.o) BLAS_LIBS="$with_blas" ;;
+	*) BLAS_LIBS="-l$with_blas" ;;
+esac
+
+# Get fortran linker names of BLAS functions to check for.
+AC_F77_FUNC(sgemm)
+AC_F77_FUNC(dgemm)
+
+ax_blas_save_LIBS="$LIBS"
+LIBS="$LIBS $FLIBS"
+
+# First, check BLAS_LIBS environment variable
+if test $ax_blas_ok = no; then
+if test "x$BLAS_LIBS" != x; then
+	save_LIBS="$LIBS"; LIBS="$BLAS_LIBS $LIBS"
+	AC_MSG_CHECKING([for $sgemm in $BLAS_LIBS])
+	AC_TRY_LINK_FUNC($sgemm, [ax_blas_ok=yes], [BLAS_LIBS=""])
+	AC_MSG_RESULT($ax_blas_ok)
+	LIBS="$save_LIBS"
+fi
+fi
+
+# BLAS linked to by default?  (happens on some supercomputers)
+if test $ax_blas_ok = no; then
+	save_LIBS="$LIBS"; LIBS="$LIBS"
+	AC_MSG_CHECKING([if $sgemm is being linked in already])
+	AC_TRY_LINK_FUNC($sgemm, [ax_blas_ok=yes])
+	AC_MSG_RESULT($ax_blas_ok)
+	LIBS="$save_LIBS"
+fi
+
+# BLAS in OpenBLAS library? (http://xianyi.github.com/OpenBLAS/)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(openblas, $sgemm, [ax_blas_ok=yes
+			                BLAS_LIBS="-lopenblas"])
+fi
+
+# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(atlas, ATL_xerbla,
+		[AC_CHECK_LIB(f77blas, $sgemm,
+		[AC_CHECK_LIB(cblas, cblas_dgemm,
+			[ax_blas_ok=yes
+			 BLAS_LIBS="-lcblas -lf77blas -latlas"],
+			[], [-lf77blas -latlas])],
+			[], [-latlas])])
+fi
+
+# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(blas, $sgemm,
+		[AC_CHECK_LIB(dgemm, $dgemm,
+		[AC_CHECK_LIB(sgemm, $sgemm,
+			[ax_blas_ok=yes; BLAS_LIBS="-lsgemm -ldgemm -lblas"],
+			[], [-lblas])],
+			[], [-lblas])])
+fi
+
+# BLAS in Intel MKL library?
+if test $ax_blas_ok = no; then
+	# MKL for gfortran
+	if test x"$ac_cv_fc_compiler_gnu" = xyes; then
+		# 64 bit
+		if test $host_cpu = x86_64; then
+			AC_CHECK_LIB(mkl_gf_lp64, $sgemm,
+			[ax_blas_ok=yes;BLAS_LIBS="-lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread"],,
+			[-lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread])
+		# 32 bit
+		elif test $host_cpu = i686; then
+			AC_CHECK_LIB(mkl_gf, $sgemm,
+				[ax_blas_ok=yes;BLAS_LIBS="-lmkl_gf -lmkl_sequential -lmkl_core -lpthread"],,
+				[-lmkl_gf -lmkl_sequential -lmkl_core -lpthread])
+		fi
+	# MKL for other compilers (Intel, PGI, ...?)
+	else
+		# 64-bit
+		if test $host_cpu = x86_64; then
+			AC_CHECK_LIB(mkl_intel_lp64, $sgemm,
+				[ax_blas_ok=yes;BLAS_LIBS="-lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread"],,
+				[-lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread])
+		# 32-bit
+		elif test $host_cpu = i686; then
+			AC_CHECK_LIB(mkl_intel, $sgemm,
+				[ax_blas_ok=yes;BLAS_LIBS="-lmkl_intel -lmkl_sequential -lmkl_core -lpthread"],,
+				[-lmkl_intel -lmkl_sequential -lmkl_core -lpthread])
+		fi
+	fi
+fi
+# Old versions of MKL
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(mkl, $sgemm, [ax_blas_ok=yes;BLAS_LIBS="-lmkl -lguide -lpthread"],,[-lguide -lpthread])
+fi
+
+# BLAS in Apple vecLib library?
+if test $ax_blas_ok = no; then
+	save_LIBS="$LIBS"; LIBS="-framework vecLib $LIBS"
+	AC_MSG_CHECKING([for $sgemm in -framework vecLib])
+	AC_TRY_LINK_FUNC($sgemm, [ax_blas_ok=yes;BLAS_LIBS="-framework vecLib"])
+	AC_MSG_RESULT($ax_blas_ok)
+	LIBS="$save_LIBS"
+fi
+
+# BLAS in Alpha CXML library?
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(cxml, $sgemm, [ax_blas_ok=yes;BLAS_LIBS="-lcxml"])
+fi
+
+# BLAS in Alpha DXML library? (now called CXML, see above)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(dxml, $sgemm, [ax_blas_ok=yes;BLAS_LIBS="-ldxml"])
+fi
+
+# BLAS in Sun Performance library?
+if test $ax_blas_ok = no; then
+	if test "x$GCC" != xyes; then # only works with Sun CC
+		AC_CHECK_LIB(sunmath, acosp,
+			[AC_CHECK_LIB(sunperf, $sgemm,
+				[BLAS_LIBS="-xlic_lib=sunperf -lsunmath"
+                                 ax_blas_ok=yes],[],[-lsunmath])])
+	fi
+fi
+
+# BLAS in SCSL library?  (SGI/Cray Scientific Library)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(scs, $sgemm, [ax_blas_ok=yes; BLAS_LIBS="-lscs"])
+fi
+
+# BLAS in SGIMATH library?
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(complib.sgimath, $sgemm,
+		     [ax_blas_ok=yes; BLAS_LIBS="-lcomplib.sgimath"])
+fi
+
+# BLAS in IBM ESSL library? (requires generic BLAS lib, too)
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(blas, $sgemm,
+		[AC_CHECK_LIB(essl, $sgemm,
+			[ax_blas_ok=yes; BLAS_LIBS="-lessl -lblas"],
+			[], [-lblas $FLIBS])])
+fi
+
+# Generic BLAS library?
+if test $ax_blas_ok = no; then
+	AC_CHECK_LIB(blas, $sgemm, [ax_blas_ok=yes; BLAS_LIBS="-lblas"])
+fi
+
+AC_SUBST(BLAS_LIBS)
+
+LIBS="$ax_blas_save_LIBS"
+
+# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
+if test x"$ax_blas_ok" = xyes; then
+        ifelse([$1],,AC_DEFINE(HAVE_BLAS,1,[Define if you have a BLAS library.]),[$1])
+        :
+else
+        ax_blas_ok=no
+        $2
+fi
+])dnl AX_BLAS
diff --git a/ax_lapack.m4 b/ax_lapack.m4
new file mode 100644
--- /dev/null
+++ b/ax_lapack.m4
@@ -0,0 +1,131 @@
+# ===========================================================================
+#         http://www.gnu.org/software/autoconf-archive/ax_lapack.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_LAPACK([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])
+#
+# DESCRIPTION
+#
+#   This macro looks for a library that implements the LAPACK linear-algebra
+#   interface (see http://www.netlib.org/lapack/). On success, it sets the
+#   LAPACK_LIBS output variable to hold the requisite library linkages.
+#
+#   To link with LAPACK, you should link with:
+#
+#     $LAPACK_LIBS $BLAS_LIBS $LIBS $FLIBS
+#
+#   in that order. BLAS_LIBS is the output variable of the AX_BLAS macro,
+#   called automatically. FLIBS is the output variable of the
+#   AC_F77_LIBRARY_LDFLAGS macro (called if necessary by AX_BLAS), and is
+#   sometimes necessary in order to link with F77 libraries. Users will also
+#   need to use AC_F77_DUMMY_MAIN (see the autoconf manual), for the same
+#   reason.
+#
+#   The user may also use --with-lapack=<lib> in order to use some specific
+#   LAPACK library <lib>. In order to link successfully, however, be aware
+#   that you will probably need to use the same Fortran compiler (which can
+#   be set via the F77 env. var.) as was used to compile the LAPACK and BLAS
+#   libraries.
+#
+#   ACTION-IF-FOUND is a list of shell commands to run if a LAPACK library
+#   is found, and ACTION-IF-NOT-FOUND is a list of commands to run it if it
+#   is not found. If ACTION-IF-FOUND is not specified, the default action
+#   will define HAVE_LAPACK.
+#
+# LICENSE
+#
+#   Copyright (c) 2009 Steven G. Johnson <stevenj@alum.mit.edu>
+#
+#   This program is free software: you can redistribute it and/or modify it
+#   under the terms of the GNU General Public License as published by the
+#   Free Software Foundation, either version 3 of the License, or (at your
+#   option) any later version.
+#
+#   This program is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
+#   Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License along
+#   with this program. If not, see <http://www.gnu.org/licenses/>.
+#
+#   As a special exception, the respective Autoconf Macro's copyright owner
+#   gives unlimited permission to copy, distribute and modify the configure
+#   scripts that are the output of Autoconf when processing the Macro. You
+#   need not follow the terms of the GNU General Public License when using
+#   or distributing such scripts, even though portions of the text of the
+#   Macro appear in them. The GNU General Public License (GPL) does govern
+#   all other use of the material that constitutes the Autoconf Macro.
+#
+#   This special exception to the GPL applies to versions of the Autoconf
+#   Macro released by the Autoconf Archive. When you make and distribute a
+#   modified version of the Autoconf Macro, you may extend this special
+#   exception to the GPL to apply to your modified version as well.
+
+#serial 7
+
+AU_ALIAS([ACX_LAPACK], [AX_LAPACK])
+AC_DEFUN([AX_LAPACK], [
+AC_REQUIRE([AX_BLAS])
+ax_lapack_ok=no
+
+AC_ARG_WITH(lapack,
+        [AS_HELP_STRING([--with-lapack=<lib>], [use LAPACK library <lib>])])
+case $with_lapack in
+        yes | "") ;;
+        no) ax_lapack_ok=disable ;;
+        -* | */* | *.a | *.so | *.so.* | *.o) LAPACK_LIBS="$with_lapack" ;;
+        *) LAPACK_LIBS="-l$with_lapack" ;;
+esac
+
+# Get fortran linker name of LAPACK function to check for.
+AC_F77_FUNC(cheev)
+
+# We cannot use LAPACK if BLAS is not found
+if test "x$ax_blas_ok" != xyes; then
+        ax_lapack_ok=noblas
+        LAPACK_LIBS=""
+fi
+
+# First, check LAPACK_LIBS environment variable
+if test "x$LAPACK_LIBS" != x; then
+        save_LIBS="$LIBS"; LIBS="$LAPACK_LIBS $BLAS_LIBS $LIBS $FLIBS"
+        AC_MSG_CHECKING([for $cheev in $LAPACK_LIBS])
+        AC_TRY_LINK_FUNC($cheev, [ax_lapack_ok=yes], [LAPACK_LIBS=""])
+        AC_MSG_RESULT($ax_lapack_ok)
+        LIBS="$save_LIBS"
+        if test $ax_lapack_ok = no; then
+                LAPACK_LIBS=""
+        fi
+fi
+
+# LAPACK linked to by default?  (is sometimes included in BLAS lib)
+if test $ax_lapack_ok = no; then
+        save_LIBS="$LIBS"; LIBS="$LIBS $BLAS_LIBS $FLIBS"
+        AC_CHECK_FUNC($cheev, [ax_lapack_ok=yes])
+        LIBS="$save_LIBS"
+fi
+
+# Generic LAPACK library?
+for lapack in lapack lapack_rs6k; do
+        if test $ax_lapack_ok = no; then
+                save_LIBS="$LIBS"; LIBS="$BLAS_LIBS $LIBS"
+                AC_CHECK_LIB($lapack, $cheev,
+                    [ax_lapack_ok=yes; LAPACK_LIBS="-l$lapack"], [], [$FLIBS])
+                LIBS="$save_LIBS"
+        fi
+done
+
+AC_SUBST(LAPACK_LIBS)
+
+# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
+if test x"$ax_lapack_ok" = xyes; then
+        ifelse([$1],,AC_DEFINE(HAVE_LAPACK,1,[Define if you have LAPACK library.]),[$1])
+        :
+else
+        ax_lapack_ok=no
+        $2
+fi
+])dnl AX_LAPACK
diff --git a/cholmod.pc.in b/cholmod.pc.in
new file mode 100644
--- /dev/null
+++ b/cholmod.pc.in
@@ -0,0 +1,13 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: @PACKAGE_NAME@
+Description: Sparse Cholesky factorization
+Version: @PACKAGE_VERSION@
+URL: @PACKAGE_URL@
+Requires.private: @CHOLMOD_REQUIRES@
+Libs: -L${libdir} -lcholmod
+Libs.private: @LAPACK_LIBS@ @BLAS_LIBS@ -lm
+Cflags: -I${includedir}/cholmod
diff --git a/configure.ac b/configure.ac
new file mode 100644
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,216 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.69])
+AC_INIT([CHOLMOD],[3.0.6],[DrTimothyAldenDavis@gmail.com],[cholmod],[http://www.suitesparse.com/])
+AC_CONFIG_SRCDIR([Core/cholmod_common.c])
+AC_CONFIG_HEADERS([config.h Include/cholmod_config.h])
+AM_INIT_AUTOMAKE([foreign])
+LT_INIT
+
+# Checks for programs.
+AC_PROG_INSTALL
+AC_PROG_CC
+AC_PROG_F77
+AC_PROG_AWK
+
+AC_MSG_CHECKING([whether to build GPL-licensed modules])
+AC_ARG_ENABLE([gpl-modules],
+	[AS_HELP_STRING(
+		[--disable-gpl-modules],
+		[do not build GPL-licensed modules])],
+	[mod_gpl=$enableval],
+	[mod_gpl="yes"])
+AC_MSG_RESULT([$mod_gpl])
+
+AC_MSG_CHECKING([whether to build mod-check])
+AC_ARG_ENABLE([mod-check],
+	[AS_HELP_STRING(
+		[--disable-mod-check],
+		[do not build the Check module])],
+	[mod_check=$enableval],
+	[mod_check="yes"])
+AC_MSG_RESULT([$mod_check])
+
+AC_MSG_CHECKING([whether to build mod-cholesky])
+AC_ARG_ENABLE([mod-cholesky],
+	[AS_HELP_STRING(
+		[--disable-mod-cholesky],
+		[do not build the Cholesky module])],
+	[mod_cholesky=$enableval],
+	[mod_cholesky="yes"])
+AC_MSG_RESULT([$mod_cholesky])
+
+AC_MSG_CHECKING([whether to build mod-partition])
+AC_ARG_ENABLE([mod-partition],
+	[AS_HELP_STRING(
+		[--disable-mod-partition],
+		[do not build the Partition module])],
+	[mod_partition=$enableval],
+	[mod_partition="yes"])
+AC_MSG_RESULT([$mod_partition])
+
+AC_MSG_CHECKING([whether to build mod-matrixops])
+AC_ARG_ENABLE([mod-matrixops],
+	[AS_HELP_STRING(
+		[--disable-mod-matrixops],
+		[do not build the MatrixOps module])],
+	[mod_matrixops=$enableval],
+	[mod_matrixops=$mod_gpl])
+AC_MSG_RESULT([$mod_matrixops])
+
+AC_MSG_CHECKING([whether to build mod-modify])
+AC_ARG_ENABLE([mod-modify],
+	[AS_HELP_STRING(
+		[--disable-mod-modify],
+		[do not build the Modify module])],
+	[mod_modify=$enableval],
+	[mod_modify=$mod_gpl])
+AC_MSG_RESULT([$mod_modify])
+
+AC_MSG_CHECKING([whether to build mod-supernodal])
+AC_ARG_ENABLE([mod-supernodal],
+	[AS_HELP_STRING(
+		[--disable-mod-supernodal],
+		[do not build the Supernodal module])],
+	[mod_supernodal=$enableval],
+	[mod_supernodal=$mod_gpl])
+AC_MSG_RESULT([$mod_supernodal])
+
+AC_MSG_CHECKING([whether to use timing routines])
+AC_ARG_ENABLE([timing],
+	[AS_HELP_STRING(
+		[--disable-timing],
+		[do not use timing routines])],
+	[timing=$enableval],
+	[timing="yes"])
+AC_MSG_RESULT([$timing])
+
+LIBS_SAVED=$LIBS
+
+# Checks for libraries.
+AC_CHECK_LIB([m], [sqrt])
+
+PKG_PROG_PKG_CONFIG
+PKG_CHECK_MODULES([SUITESPARSECONFIG],[suitesparseconfig],
+	[],
+	[AC_MSG_ERROR([cannot find suitesparseconfig])])
+CHOLMOD_REQUIRES="suitesparseconfig"
+
+if test "x$mod_cholesky" = "xyes"; then
+	PKG_CHECK_MODULES([AMD],[amd],
+		[],
+		[AC_MSG_ERROR([cannot find amd (required by mod-cholesky)])])
+	CHOLMOD_REQUIRES="$CHOLMOD_REQUIRES amd"
+
+	PKG_CHECK_MODULES([COLAMD],[colamd],
+		[],
+		[AC_MSG_ERROR([cannot find colamd (required by mod-cholesky)])])
+	CHOLMOD_REQUIRES="$CHOLMOD_REQUIRES colamd"
+fi
+
+if test "x$mod_partition" = "xyes"; then
+	PKG_CHECK_MODULES([CAMD],[camd],
+		[],
+		[AC_MSG_ERROR([cannot find camd (required by mod-partition)])])
+	CHOLMOD_REQUIRES="$CHOLMOD_REQUIRES camd"
+
+	PKG_CHECK_MODULES([CCOLAMD],[ccolamd],
+		[],
+		[AC_MSG_ERROR([cannot find ccolamd (required by mod-partition)])])
+	CHOLMOD_REQUIRES="$CHOLMOD_REQUIRES ccolamd"
+
+	PKG_CHECK_MODULES([METIS],[metis],
+		[metis="yes"],
+		[metis="no"])
+	if test "x$metis" = "xyes"; then
+		CHOLMOD_REQUIRES="$CHOLMOD_REQUIRES metis"
+	else
+		AC_MSG_WARN([cannot find metis (used by mod-partition), disabling some functionality])
+	fi
+fi
+
+if test "x$mod_supernodal" = "xyes"; then
+	sinclude([ax_blas.m4])
+	AX_BLAS
+	if test "x$ax_blas_ok" != "xyes"; then
+		AC_MSG_ERROR([cannot find blas (required by mod-supernodal)])
+	fi
+
+	sinclude([ax_lapack.m4])
+	AX_LAPACK
+	if test "x$ax_lapack_ok" != "xyes"; then
+		AC_MSG_ERROR([cannot find lapack (required by mod-supernodal)])
+	fi
+fi
+
+# Checks for header files.
+AC_CHECK_HEADERS([float.h limits.h stddef.h stdlib.h string.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_TYPE_SIZE_T
+
+# Checks for library functions.
+AC_FUNC_MALLOC
+AC_CHECK_FUNCS([sqrt])
+
+LIBS=$LIBS_SAVED
+
+if test "x$mod_check" != "xyes"; then
+	AC_DEFINE([NCHECK], [], [Define to disable the Check module])
+fi
+
+if test "x$mod_cholesky" != "xyes"; then
+	AC_DEFINE([NCHOLESKY], [], [Define to disable the Cholesky module])
+fi
+
+if test "x$mod_partition" != "xyes"; then
+	AC_DEFINE([NCAMD], [], [Define to disable the Partition module])
+fi
+
+if test "x$metis" != "xyes"; then
+	AC_DEFINE([NPARTITION], [], [Define to disable metis support in the Partition module])
+fi
+
+if test "x$mod_gpl" != "xyes"; then
+	AC_DEFINE([NGPL], [], [Define to disable GPL-licensed modules])
+fi
+
+if test "x$mod_matrixops" != "xyes"; then
+	AC_DEFINE([NMATRIXOPS], [], [Define to disable the MatrixOps module])
+fi
+
+if test "x$mod_modify" != "xyes"; then
+	AC_DEFINE([NMODIFY], [], [Define to disable the Modify module])
+fi
+
+if test "x$mod_supernodal" != "xyes"; then
+	AC_DEFINE([NSUPERNODAL], [], [Define to disable the Supernodal module])
+fi
+
+AM_CONDITIONAL([MOD_CHECK], [test "x$mod_check" = "xyes"])
+AM_CONDITIONAL([MOD_CHOLESKY], [test "x$mod_cholesky" = "xyes"])
+AM_CONDITIONAL([MOD_PARTITION], [test "x$mod_partition" = "xyes"])
+AM_CONDITIONAL([MOD_MATRIXOPS], [test "x$mod_matrixops" = "xyes"])
+AM_CONDITIONAL([MOD_MODIFY], [test "x$mod_modify" = "xyes"])
+AM_CONDITIONAL([MOD_SUPERNODAL], [test "x$mod_supernodal" = "xyes"])
+AM_CONDITIONAL([TIMING], [test "x$timing" = "xyes"])
+
+AC_SUBST([CHOLMOD_REQUIRES])
+
+AC_CONFIG_FILES([
+	cholmod.pc
+	Makefile
+	Check/Makefile
+	Cholesky/Makefile
+	Core/Makefile
+	Demo/Makefile
+	Doc/Makefile
+	GPU/Makefile
+	Include/Makefile
+	MATLAB/Makefile
+	MatrixOps/Makefile
+	Modify/Makefile
+	Partition/Makefile
+	Supernodal/Makefile])
+AC_OUTPUT
