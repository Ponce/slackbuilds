#!/bin/sh

# Slackware build script for LAPACK

# Copyright 2014-2016 Kyle Guinn <elyk03@gmail.com>, USA
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PRGNAM=lapack
SRCNAM=lapack
VERSION=${VERSION:-3.6.0}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}

if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i?86) ARCH=i486 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$(uname -m) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

DOCS="LICENSE README DOCS/lapack.png DOCS/lawn81.tex DOCS/org2.ps"

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
else
  SLKCFLAGS="-O2"
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $SRCNAM-$VERSION
tar xvf $CWD/$SRCNAM-$VERSION.tgz
cd $SRCNAM-$VERSION
chown -R root:root .
chmod -R u+w,go-w,a+rX-st .

# Fix lots of bugs with the cmake build system and .pc files.
# More importantly, allow building only the LAPACK component.
patch -p1 < $CWD/patches/generate-pkgconfig.diff
patch -p1 < $CWD/patches/link-dependencies.diff
patch -p1 < $CWD/patches/target-cleanup.diff
patch -p1 < $CWD/patches/cmake-piecewise.diff

# Avoid adding an RPATH entry to the shared lib.  It's unnecessary (except for
# running the test suite), and it's broken on 64-bit (needs LIBDIRSUFFIX).
mkdir -p shared
cd shared
  cmake \
    -DCMAKE_Fortran_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_BUILD_TYPE=None \
    -DCMAKE_RULE_MESSAGES=OFF \
    -DCMAKE_VERBOSE_MAKEFILE=TRUE \
    -DUSE_OPTIMIZED_BLAS=ON \
    -DBUILD_LAPACK=ON \
    -DBUILD_TESTING=OFF \
    -DBUILD_SHARED_LIBS=ON \
    -DCMAKE_SKIP_RPATH=YES \
    ..
  make
  make install/strip DESTDIR=$PKG
cd ..

# cmake doesn't appear to let us build both shared and static libs
# at the same time, so build it twice.  This may build a non-PIC library
# on some architectures, which should be faster.
mkdir -p static
cd static
  cmake \
    -DCMAKE_Fortran_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_BUILD_TYPE=None \
    -DCMAKE_RULE_MESSAGES=OFF \
    -DCMAKE_VERBOSE_MAKEFILE=TRUE \
    -DUSE_OPTIMIZED_BLAS=ON \
    -DBUILD_LAPACK=ON \
    -DBUILD_TESTING=OFF \
    ..
  make
  make install/strip DESTDIR=$PKG
cd ..

# Generate man pages.  Also requires some fix-ups:
# 0.  Join all escaped newlines so the entire value is replaced.
# 1.  Only generate on the LAPACK sources.
# 2.  Turn off recursion.  Only operate on directories in INPUT.
# 3.  Turn off some repetitive comments.
# 4.  Turn off HAVE_DOT.  Graphs are unnecessary for this purpose.
# 5.  Turn off MAN_LINKS.  See below.
sed -i \
  -e ':a;/\\$/N;s/\\\n//;ta' \
  -e 's/^\(INPUT *=\).*/\1 SRC/' \
  -e 's/^\(RECURSIVE *=\).*/\1 NO/' \
  -e 's/^\(REPEAT_BRIEF *=\).*/\1 NO/' \
  -e 's/^\(HAVE_DOT *=\).*/\1 NO/' \
  -e 's/^\(MAN_LINKS *=\).*/\1 NO/' \
  DOCS/Doxyfile_man
doxygen DOCS/Doxyfile_man
# Doxygen generates manpages on a file-by-file basis (note the .f extensions).
# We want a page for each function, not each file.  MAN_LINKS creates a page
# for each function that just sources the page for the corresponding file.
# This adds a lot of bloat.  Luckily, functions map 1:1 with files, so we can
# rename .f.3 -> .3 to have the page named after the function.
mkdir -p $PKG/usr/man/man3
for i in DOCS/man/man3/*.f.3; do
  gzip -9c $i > $PKG/usr/man/man3/$(basename $i .f.3).3.gz
done
# Fix up some special cases where the mapping isn't 1:1.
ln -s sladiv.3.gz $PKG/usr/man/man3/sladiv1.3.gz
ln -s sladiv.3.gz $PKG/usr/man/man3/sladiv2.3.gz
ln -s dladiv.3.gz $PKG/usr/man/man3/dladiv1.3.gz
ln -s dladiv.3.gz $PKG/usr/man/man3/dladiv2.3.gz

# Generate a few more man pages from the INSTALL directory, but copy only a
# select few.  Some are duplicated by BLAS (lsame.f), by LAPACK (ilaver.f),
# are unused (slamchf77.f, dlamchf77.f), or are test programs.
rm -rf DOCS/man
sed -i 's/^\(INPUT *=\).*/\1 INSTALL/' DOCS/Doxyfile_man
doxygen DOCS/Doxyfile_man
gzip -9c DOCS/man/man3/slamch.f.3 > $PKG/usr/man/man3/slamch.3.gz
gzip -9c DOCS/man/man3/dlamch.f.3 > $PKG/usr/man/man3/dlamch.3.gz
ln -s slamch.3.gz $PKG/usr/man/man3/slamc3.3.gz
ln -s dlamch.3.gz $PKG/usr/man/man3/dlamc3.3.gz
# The timer implementation is chosen at configure time.  Install the pages for
# all implementations and create a link for the chosen one.
for i in DOCS/man/man3/second_*.f.3 DOCS/man/man3/dsecnd_*.f.3; do
  gzip -9c $i > $PKG/usr/man/man3/$(basename $i .f.3).3.gz
done
TIME_FUNC=$(grep '^TIME_FUNC' shared/CMakeCache.txt | cut -f2 -d=)
if [ -n "${TIME_FUNC}" ]; then
  ln -s second_${TIME_FUNC}.3.gz $PKG/usr/man/man3/second.3.gz
  ln -s dsecnd_${TIME_FUNC}.3.gz $PKG/usr/man/man3/dsecnd.3.gz
fi

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a $DOCS $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}
