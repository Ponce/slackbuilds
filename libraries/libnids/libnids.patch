--- libnids-1.24/src/checksum.c.orig	2016-02-18 05:45:04.673171164 +0700
+++ libnids-1.24/src/checksum.c	2016-02-18 05:49:19.297787169 +0700
@@ -120,7 +120,7 @@
   By Jorge Cwik <jorge@laser.satlink.net>, adapted for linux by Arnt
   Gulbrandsen.
 */
-inline u_short ip_fast_csum(u_char * iph, u_int ihl)
+u_short ip_fast_csum(u_char * iph, u_int ihl)
 {
   u_int sum;
   if (dontchksum(((struct ip*)iph)->ip_src.s_addr))
@@ -172,7 +172,7 @@
   computes the checksum of the TCP/UDP pseudo-header
   returns a 16-bit checksum, already complemented
 */
-static inline u_short
+inline u_short
 csum_tcpudp_magic(u_int saddr, u_int daddr, u_short len,
 		  u_short proto, u_int sum)
 {
@@ -191,13 +191,13 @@
   this routine is used for miscellaneous IP-like checksums, mainly in
   icmp.c
 */
-inline u_short
+u_short
 ip_compute_csum(u_char * buff, int len)
 {
   return (csum_fold(csum_partial(buff, len, 0)));
 }
 
-inline u_short
+u_short
 my_tcp_check(struct tcphdr *th, int len, u_int saddr, u_int daddr)
 {
   if (dontchksum(saddr))
@@ -205,7 +205,7 @@
   return csum_tcpudp_magic(saddr, daddr, len, IPPROTO_TCP,
 			   csum_partial((u_char *)th, len, 0));
 }
-inline u_short
+u_short
 my_udp_check(void *u, int len, u_int saddr, u_int daddr)
 {
   if (dontchksum(saddr))
