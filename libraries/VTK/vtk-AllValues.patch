Index: VTK-9.0.1/Common/Core/vtkDataArray.cxx
===================================================================
--- VTK-9.0.1.orig/Common/Core/vtkDataArray.cxx
+++ VTK-9.0.1/Common/Core/vtkDataArray.cxx
@@ -1627,7 +1627,7 @@ struct ScalarRangeDispatchWrapper
   void operator()(ArrayT* array)
   {
     this->Success = vtkDataArrayPrivate::DoComputeScalarRange(
-      array, this->Range, vtkDataArrayPrivate::AllValues());
+      array, this->Range, vtkDataArrayPrivate::vtkAllValues());
   }
 };
 
@@ -1646,7 +1646,7 @@ struct VectorRangeDispatchWrapper
   void operator()(ArrayT* array)
   {
     this->Success = vtkDataArrayPrivate::DoComputeVectorRange(
-      array, this->Range, vtkDataArrayPrivate::AllValues());
+      array, this->Range, vtkDataArrayPrivate::vtkAllValues());
   }
 };
 
Index: VTK-9.0.1/Common/Core/vtkDataArray.h
===================================================================
--- VTK-9.0.1.orig/Common/Core/vtkDataArray.h
+++ VTK-9.0.1/Common/Core/vtkDataArray.h
@@ -599,7 +599,7 @@ vtkArrayDownCast_FastCastMacro(vtkDataAr
 // vtkGenericDataArray.h as well.
 namespace vtkDataArrayPrivate
 {
-struct AllValues
+struct vtkAllValues
 {
 };
 struct FiniteValues
Index: VTK-9.0.1/Common/Core/vtkGenericDataArray.txx
===================================================================
--- VTK-9.0.1.orig/Common/Core/vtkGenericDataArray.txx
+++ VTK-9.0.1/Common/Core/vtkGenericDataArray.txx
@@ -1192,7 +1192,7 @@ bool vtkGenericDataArray<DerivedT, Value
   using namespace vtk_GDA_detail;
   using Supported = IsSupported<DerivedT, ValueTypeT>;
   return ComputeScalarValueRangeImpl(
-    static_cast<DerivedT*>(this), ranges, vtkDataArrayPrivate::AllValues{}, Supported{});
+    static_cast<DerivedT*>(this), ranges, vtkDataArrayPrivate::vtkAllValues{}, Supported{});
 }
 
 //-----------------------------------------------------------------------------
@@ -1202,7 +1202,7 @@ bool vtkGenericDataArray<DerivedT, Value
   using namespace vtk_GDA_detail;
   using Supported = IsSupported<DerivedT, ValueTypeT>;
   return ComputeVectorValueRangeImpl(
-    static_cast<DerivedT*>(this), range, vtkDataArrayPrivate::AllValues{}, Supported{});
+    static_cast<DerivedT*>(this), range, vtkDataArrayPrivate::vtkAllValues{}, Supported{});
 }
 
 //-----------------------------------------------------------------------------
Index: VTK-9.0.1/Common/Core/vtkDataArrayPrivate.txx
===================================================================
--- VTK-9.0.1.orig/Common/Core/vtkDataArrayPrivate.txx
+++ VTK-9.0.1/Common/Core/vtkDataArrayPrivate.txx
@@ -301,7 +301,7 @@ template <int NumComps>
 struct ComputeScalarRange
 {
   template <class ArrayT, typename RangeValueType>
-  bool operator()(ArrayT* array, RangeValueType* ranges, AllValues)
+  bool operator()(ArrayT* array, RangeValueType* ranges, vtkAllValues)
   {
     AllValuesMinAndMax<NumComps, ArrayT> minmax(array);
     vtkSMPTools::For(0, array->GetNumberOfTuples(), minmax);
@@ -435,7 +435,7 @@ public:
 };
 
 template <class ArrayT, typename RangeValueType>
-bool GenericComputeScalarRange(ArrayT* array, RangeValueType* ranges, AllValues)
+bool GenericComputeScalarRange(ArrayT* array, RangeValueType* ranges, vtkAllValues)
 {
   AllValuesGenericMinAndMax<ArrayT> minmax(array);
   vtkSMPTools::For(0, array->GetNumberOfTuples(), minmax);
@@ -518,7 +518,7 @@ bool DoComputeScalarRange(ArrayT* array,
 //----------------------------------------------------------------------------
 // generic implementation that operates on ValueType.
 template <typename ArrayT, typename RangeValueType>
-bool DoComputeVectorRange(ArrayT* array, RangeValueType range[2], AllValues)
+bool DoComputeVectorRange(ArrayT* array, RangeValueType range[2], vtkAllValues)
 {
   range[0] = vtkTypeTraits<RangeValueType>::Max();
   range[1] = vtkTypeTraits<RangeValueType>::Min();
Index: VTK-9.0.1/Common/Core/vtkGenericDataArray.h
===================================================================
--- VTK-9.0.1.orig/Common/Core/vtkGenericDataArray.h
+++ VTK-9.0.1/Common/Core/vtkGenericDataArray.h
@@ -414,7 +414,7 @@ namespace vtkDataArrayPrivate
 template <typename A, typename R, typename T>
 bool DoComputeScalarRange(A*, R*, T);
 template <typename A, typename R>
-bool DoComputeVectorRange(A*, R[2], AllValues);
+bool DoComputeVectorRange(A*, R[2], vtkAllValues);
 template <typename A, typename R>
 bool DoComputeVectorRange(A*, R[2], FiniteValues);
 } // namespace vtkDataArrayPrivate
@@ -466,11 +466,11 @@ class vtkScaledSOADataArrayTemplate;
 
 #define VTK_INSTANTIATE_VALUERANGE_ARRAYTYPE(ArrayType, ValueType)                                 \
   template VTKCOMMONCORE_EXPORT bool DoComputeScalarRange(                                         \
-    ArrayType*, ValueType*, vtkDataArrayPrivate::AllValues);                                       \
+    ArrayType*, ValueType*, vtkDataArrayPrivate::vtkAllValues);                                       \
   template VTKCOMMONCORE_EXPORT bool DoComputeScalarRange(                                         \
     ArrayType*, ValueType*, vtkDataArrayPrivate::FiniteValues);                                    \
   template VTKCOMMONCORE_EXPORT bool DoComputeVectorRange(                                         \
-    ArrayType*, ValueType[2], vtkDataArrayPrivate::AllValues);                                     \
+    ArrayType*, ValueType[2], vtkDataArrayPrivate::vtkAllValues);                                     \
   template VTKCOMMONCORE_EXPORT bool DoComputeVectorRange(                                         \
     ArrayType*, ValueType[2], vtkDataArrayPrivate::FiniteValues);
 
@@ -516,18 +516,18 @@ namespace vtkDataArrayPrivate
 template <typename A, typename R, typename T>
 bool DoComputeScalarRange(A*, R*, T);
 template <typename A, typename R>
-bool DoComputeVectorRange(A*, R[2], AllValues);
+bool DoComputeVectorRange(A*, R[2], vtkAllValues);
 template <typename A, typename R>
 bool DoComputeVectorRange(A*, R[2], FiniteValues);
 } // namespace vtkDataArrayPrivate
 
 #define VTK_DECLARE_VALUERANGE_ARRAYTYPE(ArrayType, ValueType)                                     \
   extern template VTKCOMMONCORE_EXPORT bool DoComputeScalarRange(                                  \
-    ArrayType*, ValueType*, vtkDataArrayPrivate::AllValues);                                       \
+    ArrayType*, ValueType*, vtkDataArrayPrivate::vtkAllValues);                                       \
   extern template VTKCOMMONCORE_EXPORT bool DoComputeScalarRange(                                  \
     ArrayType*, ValueType*, vtkDataArrayPrivate::FiniteValues);                                    \
   extern template VTKCOMMONCORE_EXPORT bool DoComputeVectorRange(                                  \
-    ArrayType*, ValueType[2], vtkDataArrayPrivate::AllValues);                                     \
+    ArrayType*, ValueType[2], vtkDataArrayPrivate::vtkAllValues);                                     \
   extern template VTKCOMMONCORE_EXPORT bool DoComputeVectorRange(                                  \
     ArrayType*, ValueType[2], vtkDataArrayPrivate::FiniteValues);
 
