#!/bin/bash

# Slackware build script for megaglest

# Copyright 2011-2017 Larry Hajali <larryhaj[at]gmail[dot]com>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# 20220222 bkw: Modified by SlackBuilds.org: fix build on 15.0.

# 20210215 bkw: modified by SlackBuilds.org: This build was broken for
# *3 years* and nobody ever complained...
# - Add -std=c++11 to CXXFLAGS.
# - Force cmake to use lua 5.1. This fixes the build on systems where
#   both lua and (lua52 and/or lua53) are installed.
# - Add -j1 to the 'make install' because the xvfb-run script fails if
#   a 2nd instance is started (and get rid of parallel build warning
#   in README).

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=megaglest
VERSION=${VERSION:-3.13.0}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-source-$VERSION.tar.xz
tar xvf $CWD/$PRGNAM-source-embedded-$VERSION.tar.xz
tar xvf $CWD/$PRGNAM-data-$VERSION.tar.xz -C $PRGNAM-$VERSION
cd $PRGNAM-$VERSION
#find . -type l -exec rm -f '{}' \;
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \+ -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \+

# 20220222 bkw: force cmake to find wxPython (wx version 2), regardless
# of the /usr/bin/wx-config symlink.
mkdir -p wxtmp
ln -s /usr/lib$LIBDIRSUFFIX/wx/config/gtk2-unicode-release-2.8 wxtmp/wx-config
export PATH=$(pwd)/wxtmp:$PATH

# Fix megaglest help2man when no X display is available. Use a wrapper
# script from upstream for Xvfb that creates a temporary *fake* framebuffer.
install -D -m 0755 $CWD/xvfb-run $TMP/$PRGNAM-$VERSION/bin/xvfb-run
export PATH="$PATH:$TMP/$PRGNAM-$VERSION/bin"
patch -p1 < $CWD/megaglest-help2man.patch
patch -p1 < $CWD/megaglest-underlink.patch

SLKCFLAGS+=" -fcommon"

mkdir build
cd build
  cmake -G "Unix Makefiles" \
    -DLUA_LIBRARY="/usr/lib$LIBDIRSUFFIX/liblua.so" \
    -DLUA_INCLUDE_DIR="/usr/include/" \
    -DLUA_MATH_LIBRARY="/usr/lib$LIBDIRSUFFIX/libm.so" \
    -DCMAKE_INSTALL_PREFIX:PATH=/usr \
    -DWANT_GIT_STAMP=OFF \
    -DMEGAGLEST_BIN_INSTALL_PATH:PATH="games/" \
    -DMEGAGLEST_MANPAGE_INSTALL_PATH:PATH="man/man6/" \
    -DWANT_USE_XercesC:BOOL=ON \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS -std=c++11" \
    -DCMAKE_BUILD_TYPE=Release ..

  make VERBOSE=1
  make -j1 install DESTDIR=$PKG
cd -

# Now install the game data
cd $PRGNAM-$VERSION
  cmake -G "Unix Makefiles" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_BUILD_TYPE=Release .

  make install DESTDIR=$PKG
cd -

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

find $PKG/usr/man -type f -exec gzip -9 '{}' \;

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a \
  docs/* $PRGNAM-$VERSION/docs/{AUTHORS*,LICENSE*,README.data*,cc*}.txt \
  $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
