#!/bin/bash

# Slackware build script for SEGGER J-Link

# Copyright 2021 Andrzej Telszewski, Szczecin
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=J-Link
VERSION=${VERSION:-7.00a}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

if [ "$ARCH" != "i586" ] && [ "$ARCH" != "x86_64" ]; then
  echo -ne "\n\nError: \"${ARCH}\" architecture is not supported.\n\n"
  exit 1
fi

SRCNAM="JLink_Linux_V$(echo $VERSION | tr -d .)"

if [ "$ARCH" = "i586" ]; then
  SRCNAM="${SRCNAM}_i386"
else
  SRCNAM="${SRCNAM}_${ARCH}"
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$SRCNAM.tgz
mv $SRCNAM $PRGNAM-$VERSION
cd $PRGNAM-$VERSION

TREE_MD5=bfc46ffdebe4e426f48d2ad74e1aeb33
UDEV_MD5=048a92be10a5864e558415326001d5e9

TREE_MD5_NEW=( $(find . -not \( -path './x86' -prune \) -not -name 'libjlinkarm.so*' \
  -not -name 'libjlinkarm_x86.so*' -not -name 'libQt*' | LC_ALL=C sort | md5sum) )
UDEV_MD5_NEW=( $(md5sum 99-jlink.rules) )

if [ $TREE_MD5 != $TREE_MD5_NEW ] || [ $UDEV_MD5 != $UDEV_MD5_NEW ]; then
  if [ $TREE_MD5 != $TREE_MD5_NEW ]; then
    printf "\n\tThe directory structure for which this script has been written is different\n"
    printf "\tfrom the provided one. Although most probably nothing wrong will happen,\n"
    printf "\tit's possible there will be a missing file or a build failure.\n"
  fi

  if [ $UDEV_MD5 != $UDEV_MD5_NEW ]; then
    printf "\n\tThe udev rules found in the provided source are different from the one\n"
    printf "\tfor which this script has been written. Although most probably nothing\n"
    printf "\twrong will happen, you might run into some device permissions problems.\n"
  fi

  sleep 5
fi

chown -R root:root .
chmod -R a-st,u+rwX,go-w+rX .

mkdir -p $PKG/opt/J-Link
cp -a Devices ETC GDBServer JFlash* JLink* JMemExe JRunExe JTAGLoadExe libQt* \
  $PKG/opt/J-Link

mkdir -p $PKG/usr/bin

# The official J-Link tarball contains executables and soft links to executables
# in the _root_ directory of the tarball. This SlackBuild makes _/opt/J-Link_
# the _root_ directory of the executables and exposes them in _/usr/bin_ with soft links.

find $PKG/opt/J-Link -maxdepth 1 -print0 | xargs -0 file -L | grep -e 'ELF.*executable' | \
  cut -f1 -d: | rev | cut -f1 -d/ | rev | while IFS= read -r EXENAME; do
  if [ -L $EXENAME ]; then
    ln -s /opt/J-Link/$(readlink $EXENAME) $PKG/usr/bin/$EXENAME
  else
    ln -s /opt/J-Link/$EXENAME $PKG/usr/bin/$EXENAME
  fi
done

mkdir -p $PKG/usr/lib$LIBDIRSUFFIX
cp -a libjlinkarm.so* $PKG/usr/lib$LIBDIRSUFFIX
ln -s /usr/lib$LIBDIRSUFFIX/libjlinkarm.so $PKG/opt/J-Link/libjlinkarm.so

mkdir -p $PKG/lib/udev/rules.d
fromdos < 99-jlink.rules > $PKG/lib/udev/rules.d/99-jlink.rules
sed -i 's/SUBSYSTEM!="usb_device"/SUBSYSTEM!="usb"/g' $PKG/lib/udev/rules.d/99-jlink.rules
sed -i -E 's/MODE="0{0,1}666"(, GROUP="dialout"){0,1}/MODE="0664", GROUP="plugdev"/g' \
  $PKG/lib/udev/rules.d/99-jlink.rules

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a Doc/* Samples $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
