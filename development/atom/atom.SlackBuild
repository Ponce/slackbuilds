#!/bin/bash

# Slackware build script for atom

# Copyright 2013-2016 Dhaby Xiloj <slack.dhabyx@gmail.com>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=atom
VERSION=${VERSION:-1.50.0}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}

#Disable send metrics to Google Analytics module
DISABLE_METRICS=${DISABLE_METRICS:-no}
#Clean cache data after building
DELETE_CACHE=${DELETE_CACHE:-no}
#Use pre-installed electron from SBo
ELECTRON=${ELECTRON:-no}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [[ "$ARCH" = "i"?"86" ]]; then
  LIBDIRSUFFIX=""
  NPMARCH="ia32"
  ARCH_OUTPUT="i386" # for detect output directory
elif [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64"
  NPMARCH="x64"
  ARCH_OUTPUT="amd64" # for detect output directory
else
  echo "Your platform $ARCH is not supported."
  exit 1
fi

set -e

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar -xvf $CWD/$PRGNAM-$VERSION.tar.gz || tar xvf $CWD/v$VERSION
cd $PRGNAM-$VERSION
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;

if [ "$ELECTRON" != "no" ]; then
  # test if electron is installed
  ELECTRON_VERSION=$(electron --version | tr -d 'v')
fi

if [ "${ELECTRON_VERSION}" != "" ]; then
  # change electron version in package.json
  sed -i -E -e 's/"electronVersion": "[0-9.]+"/"electronVersion": "'${ELECTRON_VERSION}'"/g' package.json
  # patch for use electron pre-installed
  patch -p1 < $CWD/use-system-electron.patch
  patch -p1 < $CWD/fix-atom.sh.patch
  # patch for IME events from ARCH AUR PKGBuild
  patch -p1 < $CWD/fix-ime-events-handler-electron-1.4.patch
fi

if [ "$DISABLE_METRICS" = "yes" ]; then
    sed -i '/"metrics":/d' package.json
fi

echo '*********************************************************************'
echo '* The installation process will download a lot of modules for atom. *'
echo '*********************************************************************'

npm_config_arch=$NPMARCH \
npm_config_target_arch=$NPMARCH \
PYTHON=python2 \
 ./script/build

# Manual installation since --install-dir option is deleted
# Installation based on spec file from official RPM package from atom
install -d $PKG/usr/{bin,doc,share}

if [ "${ELECTRON_VERSION}" != "" ]; then
  cp -r out/app $PKG/usr/share/atom
  # apm - manually installation to upstream recommended place
  ATOM_RESOURCES=/usr/share/atom/resources/app
  install -d $PKG/$ATOM_RESOURCES
  cp -r apm $PKG/$ATOM_RESOURCES
  # fix paths for apm
  sed -i -e 's#'$TMP/$PRGNAM-$VERSION'#'$ATOM_RESOURCES'#g' \
    $PKG/$ATOM_RESOURCES/apm/node_modules/atom-package-manager/package.json
  sed -i -e 's#resources/app.asar##g' \
    $PKG/$ATOM_RESOURCES/apm/node_modules/atom-package-manager/lib/apm.js
else
  # packaged installation
  cp -r out/$PRGNAM-$VERSION-$ARCH_OUTPUT $PKG/usr/share/atom
fi

install -Dm755 atom.sh $PKG/usr/bin/atom
(
  cd $PKG/usr/bin
  ln -sf ../share/atom/resources/app/apm/node_modules/.bin/apm apm
)

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

# use only if you use apmd package from Slackware pastures
# mv $PKG/usr/bin/apm $PKG/usr/bin/atom-apm

# move and configure icons and .desktop file
(
  cd resources/app-icons/stable/png
  for IMG in *.png
  do
    DIR_NAME=${IMG%.*}x${IMG%.*}
    install -D $IMG $PKG/usr/share/icons/hicolor/$DIR_NAME/apps/$PRGNAM.png
  done
)
mkdir -p $PKG/usr/share/applications
cat $CWD/$PRGNAM.desktop > $PKG/usr/share/applications/$PRGNAM.desktop


if [ "$DELETE_CACHE" = "yes" ]; then
    # delete temporal data
    rm -rf ~/.atom/
fi

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -ar LICENSE.md README.md CONTRIBUTING.md CHANGELOG.md docs \
    $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > \
    $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
