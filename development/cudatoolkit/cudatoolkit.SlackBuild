#!/bin/bash

# Slackware build script for CUDA Toolkit

# Copyright 2020 Giorgio Peron <giorgio.peron@gmail.com>, Belluno, Italy
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=cudatoolkit
FILENAME=cuda
VERSION=${VERSION:-10.2.89}
DRIVER=${DRIVER:-440.33.01}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}


case "$( uname -m )" in
  i?86) ARCH=i386 ;;
  arm*) ARCH=arm ;;
     *) ARCH=$( uname -m ) ;;
esac

# If the variable PRINT_PACKAGE_NAME is set, then this script will report what
# the name of the created package would be, and then exit. This information
# could be useful to other scripts.
if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

set -e

if [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64"
else
  printf "\n\n$ARCH is not supported... \n"
  exit 1
fi

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
mkdir -p $PRGNAM-$VERSION

chmod +x $CWD/$FILENAME\_$VERSION\_$DRIVER\_linux.run
sh $CWD/$FILENAME\_$VERSION\_$DRIVER\_linux.run --target $PRGNAM-$VERSION --noexec

mkdir -p $PKG/usr/share
cd $PRGNAM-$VERSION/builds
cp -r cuda-toolkit "$PKG/usr/share/cuda"
cp -r cublas/include/* "$PKG/usr/share/cuda/include/"
mkdir -p $PKG/usr/lib64
cp -r cublas/lib64/* "$PKG/usr/lib$LIBDIRSUFFIX/"
cp -r cuda-samples "$PKG/usr/share/cuda/samples"

# Define compilers for CUDA to use.
# This allows us to use older versions of GCC if we have to.
# ln -s /usr/bin/gcc-8 "${PKG}/usr/share/cuda/bin/gcc"
# ln -s /usr/bin/g++-8 "${PKG}/usr/share/cuda/bin/g++"

# Put man in the standard place
mv $PKG/usr/share/cuda/doc/man $PKG/usr/
find $PKG/usr/man -type f -exec gzip -9 {} \;
for i in $( find $PKG/usr/man -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done

# Put doc in the standard place
mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
mv $PKG/usr/share/cuda/doc/* $PKG/usr/doc/$PRGNAM-$VERSION/
rm -rf $PKG/usr/share/cuda/doc
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

# Create soname links.
find cuda-toolkit/targets -type f -name '*.so*' ! -path '*stubs/*' -print0 | while read -rd $'\0' _lib; do
  _base=${_lib%.so.*}
  _current_soname=$(basename ${_lib%.*})
  while [[ $_current_soname != $(basename $_base) ]]; do
    ln -sf ${_lib##*/} ${PKG}/usr/share/cuda/lib$LIBDIRSUFFIX/$_current_soname
    _current_soname=${_current_soname%.*}
  done
done

# Install profile and ld.so.config files
install -Dm755 "${CWD}/files/cuda.sh" "${PKG}/etc/profile.d/cuda.sh"
install -Dm755 "${CWD}/files/cuda.csh" "${PKG}/etc/profile.d/cuda.csh"

# Install pkgconfig files
mkdir -p "$PKG"/usr/lib${LIBDIRSUFFIX}/pkgconfig
cp "${CWD}"/files/*.pc "${PKG}"/usr/lib${LIBDIRSUFFIX}/pkgconfig

# Remove included copy of java and link to system java 8
rm -fr  "${PKG}/usr/share/cuda/jre"
sed 's|../jre/bin/java|/usr/bin/java|g' \
  -i "${PKG}/usr/share/cuda/libnsight/nsight.ini" \
  -i "${PKG}/usr/share/cuda/libnvvp/nvvp.ini"

# Allow newer compilers to work.
# See https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#system-requirements
# for official requirements
sed -i "/.*unsupported GNU version.*/d" "${PKG}"/usr/share/cuda/targets/x86_64-linux/include/crt/host_config.h
sed -i "/.*unsupported clang version.*/d" "${PKG}"/usr/share/cuda/targets/x86_64-linux/include/crt/host_config.h

# Fix Makefile paths to CUDA
for f in $(find "$PKG"/usr/share/cuda -name Makefile); do
  sed -i "s|/usr/local/cuda|/usr/share/cuda|g" "$f"
done

# Put libraries in the standard place
mkdir -p $PKG/usr/lib${LIBDIRSUFFIX}
mv -fn $PKG/usr/share/cuda/targets/x86_64-linux/lib/* $PKG/usr/lib${LIBDIRSUFFIX}/
rm -rf $PKG/usr/share/cuda/targets/x86_64-linux/lib
cd $PKG/usr/share/cuda
ln -sf ../../lib${LIBDIRSUFFIX} lib${LIBDIRSUFFIX}

# Register application  NVVP and NSIGHT 
mkdir -p $PKG/usr/share/applications
cp $CWD/files/*.desktop $PKG/usr/share/applications

# Put include in the standard place
mkdir -p $PKG/usr/include
mv -fn $PKG/usr/share/cuda/targets/x86_64-linux/include/* $PKG/usr/include/
rm -rf $PKG/usr/share/cuda/targets/x86_64-linux/include
cd $PKG/usr/share/cuda/
ln -sf ../../include include

rm -rf $PKG/usr/share/cuda/targets

# These are already in the nvidia-driver package
rm -f $PKG/usr/lib${LIBDIRSUFFIX}/libOpenCL.s*

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -c n -l y $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
